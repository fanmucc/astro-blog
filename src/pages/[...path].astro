---
// src/pages/[...path].astro - 博客详情页面，专注于内容展示
import { getCollection, type CollectionEntry } from "astro:content";
import Layout from "../layouts/Layout.astro";
import { buildMenuTree, getPageByPath, type PageEntry } from "../utils/menu";
import "../styles/markdown.css";

export async function getStaticPaths() {
	// 获取所有发布的页面
	const pages = await getCollection(
		"pages",
		({ data }: { data: PageEntry["data"] }) => {
			return data.published && !data.draft;
		}
	);

	console.log("生成静态路径，总页面数:", pages.length);

	const paths = [];

	for (const page of pages) {
		const pathParts = page.slug.split("/");
		console.log(`处理页面: ${page.slug}, 路径分段:`, pathParts);

		if (pathParts.length === 1) {
			// 单层页面，如 home -> /home
			const path = pathParts[0];
			paths.push({ params: { path }, props: { page } });
			console.log(`添加单层页面路径: /${path}`);
		} else if (pathParts.length === 2 && pathParts[1] === "index") {
			// 主菜单的index页面，如 home/index -> /home
			const path = pathParts[0];
			paths.push({ params: { path }, props: { page } });
			console.log(`添加主菜单index路径: /${path}`);
		} else if (pathParts.length === 2 && pathParts[1] !== "index") {
			// 二层页面，如 react/start -> /react/start
			const path = `${pathParts[0]}/${pathParts[1]}`;
			paths.push({ params: { path }, props: { page } });
			console.log(`添加二层页面路径: /${path}`);
		} else if (pathParts.length === 3 && pathParts[2] === "index") {
			// 子菜单的index页面，如 react/start/index -> /react/start
			const path = `${pathParts[0]}/${pathParts[1]}`;
			paths.push({ params: { path }, props: { page } });
			console.log(`添加子菜单index路径: /${path}`);
		} else if (pathParts.length === 3 && pathParts[2] !== "index") {
			// 具体页面，需要处理 pageName
			const pageName = page.data.pageName || pathParts[2];
			const path = `${pathParts[0]}/${pathParts[1]}/${pageName}`;
			paths.push({ params: { path }, props: { page } });
			console.log(
				`添加页面路径: /${path} (原文件: ${page.slug}, pageName: ${page.data.pageName})`
			);
		}
	}

	console.log(
		"生成的所有路径:",
		paths.map((p) => `/${p.params.path}`)
	);
	return paths;
}

type Props = {
	page: CollectionEntry<"pages">;
};

const { page } = Astro.props;
const { Content } = await page.render();

// 获取当前路径
const currentPath = `/${Astro.params.path}`;

// SEO 数据
const seoTitle = page.data.seoTitle || page.data.title;
const seoDescription = page.data.seoDescription || page.data.description;
---

<Layout
	title={seoTitle}
	description={seoDescription}
	currentPath={currentPath}
	showSidebar={true}
	showHeader={true}
	showBreadcrumb={false}
	theme='auto'
	pageType='article'
>
	<div class='flex gap-4'>
		<!-- 文章内容 -->
		<article class='blog-article content-area'>
			<!-- <header class='article-header'> -->
			<!-- <h1 class='article-title'>{page.data.title}</h1> -->
			<!-- {
					page.data.description && (
						<p class='article-description'>{page.data.description}</p>
					)
				} -->
			<!-- <div class='article-meta'>
					<div class='meta-item'>
						<span class='meta-label'>作者:</span>
						<span class='meta-value'>{page.data.author}</span>
					</div>
					<div class='meta-item'>
						<span class='meta-label'>创建:</span>
						<span class='meta-value'>
							{page.data.createdAt.toLocaleDateString("zh-CN")}
						</span>
					</div>
					{
						page.data.updatedAt && (
							<div class='meta-item'>
								<span class='meta-label'>更新:</span>
								<span class='meta-value'>
									{page.data.updatedAt.toLocaleDateString("zh-CN")}
								</span>
							</div>
						)
					}
					{
						page.data.readingTime && (
							<div class='meta-item'>
								<span class='meta-label'>阅读时间:</span>
								<span class='meta-value'>{page.data.readingTime} 分钟</span>
							</div>
						)
					}
				</div> -->
			<!-- 标签区域 -->
			<!-- </header> -->
			<div class='article-content'>
				<Content />
			</div>
			{
				page.data.tags && page.data.tags.length > 0 && (
					<aside class='article-tags'>
						{/* <div class='tags-list'>
							{page.data.tags.map((tag) => (
								<span class='tag-item'>#{tag}</span>
							))}
						</div> */}
						<div class='text-right'>
							{page.data.author} 发布于
							{page.data.createdAt.toLocaleDateString("zh-CN")}
						</div>
						{/* <div class='text-right'>
							{page.data.createdAt.toLocaleDateString("zh-CN")}
						</div>
						<div class='text-right'>
							{page.data.updatedAt.toLocaleDateString("zh-CN")}
						</div> */}
						{/* <div class='text-right'>{page.data.readingTime} 分钟</div> */}
					</aside>
				)
			}
		</article>
		<!-- 文章导航 -->
		<div class='w-[18rem]'>
			<nav class='article-nav' id='article-nav'>
				<!-- 文章目录将通过脚本动态生成 -->
			</nav>
		</div>
	</div>

	<!-- 文章特定脚本 -->
	<script define:vars={{ currentPath }}>
		// 生成目录的函数
		function generateTOC() {
			const article = document.querySelector(".article-content");
			const nav = document.getElementById("article-nav");
			if (!article || !nav) return;

			// 清空现有目录
			nav.innerHTML =
				'<div class="toc-header">目录</div><ul class="toc-list"></ul>';
			const tocList = nav.querySelector(".toc-list");

			// 获取所有标题
			const headings = article.querySelectorAll("h1, h2, h3, h4, h5, h6");
			headings.forEach((heading, index) => {
				// 为每个标题添加 id
				const id = `heading-${index}`;
				heading.id = id;

				// 创建目录项
				const li = document.createElement("li");
				li.className = "toc-item";
				const a = document.createElement("a");
				// 使用当前页面的 URL 作为基础
				const currentPath = window.location.pathname;
				a.href = `${currentPath}#${id}`;
				a.className = "toc-link";
				a.textContent = heading.textContent;
				li.appendChild(a);
				tocList.appendChild(li);
			});
		}

		// 监听 Astro 的页面切换事件
		document.addEventListener("astro:page-load", () => {
			generateTOC();
		});

		// 初始加载时生成目录
		document.addEventListener("DOMContentLoaded", () => {
			generateTOC();
		});

		// 监听滚动事件，更新当前活动目录项
		document.addEventListener("scroll", () => {
			const headings = document.querySelectorAll(
				".article-content h1, .article-content h2, .article-content h3, .article-content h4, .article-content h5, .article-content h6"
			);
			const tocLinks = document.querySelectorAll(".toc-link");

			let currentHeading = null;
			headings.forEach((heading) => {
				const rect = heading.getBoundingClientRect();
				if (rect.top <= 100) {
					currentHeading = heading;
				}
			});

			tocLinks.forEach((link) => {
				link.classList.remove("active");
				if (
					currentHeading &&
					link.getAttribute("href").endsWith(`#${currentHeading.id}`)
				) {
					link.classList.add("active");
				}
			});
		});
	</script>

	<style is:global>
		/* ============== 基础主题变量 ============== */
		:root {
			/* 主题色调 */
			--primary-color: rgb(var(--color-primary));
			--primary-dark: rgb(var(--color-primary-dark));
			--primary-light: rgb(var(--color-primary-light));

			/* 基础配色 */
			--body-text-color: #282c34;
			--content-write-bg-color: #fefefe;
			--border-color: #e8f4ee;
			--border-hover-color: var(--primary-color);
		}

		/* 暗色模式 */
		.dark {
			--body-text-color: #e2e8f0;
			--content-write-bg-color: #1e293b;
			--border-color: #475569;
		}

		/* ============== 基础布局样式 ============== */
		.blog-article {
			/* max-width: 900px; */
			width: 100%;
			margin: 0 auto;
			padding: 2rem 1rem;
		}

		.content-area {
			/* background-color: var(--content-write-bg-color);
			border-radius: 0.75rem;
			padding: 2.5rem;
			box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); */
		}

		/* ============== 文章头部样式 ============== */
		.article-header {
			text-align: left;
			margin-bottom: 3rem;
			padding-bottom: 2rem;
			border-bottom: 1px solid var(--border-color);
		}

		.article-title {
			font-size: 2.5rem;
			font-weight: 700;
			color: var(--body-text-color);
			margin-bottom: 1rem;
			line-height: 1.2;
			position: relative;
			display: inline-block;
			transition: all 0.3s ease;
		}

		.article-title::after {
			content: "";
			position: absolute;
			bottom: -4px;
			left: 0;
			width: 0;
			height: 2px;
			background: var(--primary-color);
			transition: width 0.3s ease;
		}

		.article-title:hover {
			color: var(--primary-color);
			transform: translateY(-2px);
		}

		.article-title:hover::after {
			width: 100%;
		}

		.article-description {
			font-size: 1.25rem;
			color: var(--g-text-secondary);
			margin-bottom: 1.5rem;
			line-height: 1.6;
		}

		.article-meta {
			display: flex;
			flex-wrap: wrap;
			gap: 1.5rem;
			font-size: 0.875rem;
			justify-content: left;
		}

		.meta-item {
			display: flex;
			align-items: center;
			gap: 0.5rem;
		}

		.meta-label {
			font-weight: 500;
			color: var(--g-text-tertiary);
		}

		.meta-value {
			color: var(--g-text-tertiary);
		}

		/* ============== 基础容器样式 ============== */
		.article-content {
			font-family:
				"Inter",
				-apple-system,
				BlinkMacSystemFont,
				"Segoe UI",
				sans-serif;
		}

		/* 语言标识样式 */
		.code-language {
			position: absolute;
			top: 12px;
			left: 12px;
			font-size: 12px;
			font-weight: 500;
			color: var(--body-text-color);
			background-color: rgba(255, 255, 255, 0.9);
			padding: 2px 6px;
			border-radius: 4px;
			font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", sans-serif;
			text-transform: uppercase;
			letter-spacing: 0.5px;
			z-index: 5;
		}

		.dark .code-language {
			background-color: rgba(30, 41, 59, 0.9);
			color: var(--body-text-color);
		}

		/* 标签样式 */
		.article-tags {
			margin-top: 2rem;
			padding-top: 2rem;
			border-top: 1px solid var(--border-color);
		}

		.tags-title {
			font-size: 1.125rem;
			font-weight: 600;
			color: var(--body-text-color);
			margin-bottom: 1rem;
		}

		.tags-list {
			display: flex;
			flex-wrap: wrap;
			gap: 0.5rem;
		}

		.tag-item {
			padding: 0.25rem 0.75rem;
			font-size: 0.875rem;
			font-weight: 500;
			background-color: rgba(84, 161, 43, 0.1);
			color: var(--body-text-color);
			border-radius: 9999px;
			transition: all 0.3s ease;
		}

		.tag-item:hover {
			background-color: rgba(84, 161, 43, 0.2);
			color: var(--border-hover-color);
			transform: translateY(-1px);
		}

		/* 文章目录 */
		.article-nav {
			position: fixed;
			right: 2rem;
			top: 10rem;
			width: 15rem;
			max-height: 80vh;
			background-color: var(--content-write-bg-color);
			border: 1px solid var(--border-color);
			border-radius: 1rem;
			padding: 1.25rem;
			overflow-y: auto;
			z-index: 10;
			box-shadow: 0 8px 24px rgba(0, 0, 0, 0.08);
			transition: all 0.3s ease;
			backdrop-filter: blur(8px);
			-webkit-backdrop-filter: blur(8px);
		}

		.article-nav:hover {
			box-shadow: 0 12px 32px rgba(84, 161, 43, 0.12);
			border-color: var(--primary-color);
		}

		.article-nav::-webkit-scrollbar {
			width: 4px;
		}

		.article-nav::-webkit-scrollbar-track {
			background: transparent;
		}

		.article-nav::-webkit-scrollbar-thumb {
			background: var(--primary-color);
			border-radius: 4px;
		}

		.article-nav::-webkit-scrollbar-thumb:hover {
			background: var(--primary-color-dark);
		}

		.toc-header {
			font-weight: 600;
			color: var(--body-text-color);
			margin-bottom: 0.75rem;
			font-size: 0.875rem;
		}

		.toc-list {
			list-style: none;
			padding: 0;
			margin: 0;
		}

		.toc-item {
			margin-bottom: 0.25rem;
		}

		.toc-link {
			display: block;
			padding: 0.25rem 0;
			font-size: 0.75rem;
			color: var(--body-text-color);
			text-decoration: none;
			line-height: 1.4;
			transition: all 0.3s ease;
		}

		.toc-link:hover,
		.toc-link.active {
			color: var(--border-hover-color);
			transform: translateX(4px);
		}

		/* 图片覆盖层 */
		.image-overlay {
			position: fixed;
			top: 0;
			left: 0;
			right: 0;
			bottom: 0;
			background-color: rgba(0, 0, 0, 0.8);
			display: flex;
			align-items: center;
			justify-content: center;
			z-index: 100;
		}

		.overlay-content {
			position: relative;
			max-width: 90vw;
			max-height: 90vh;
		}

		.overlay-content img {
			max-width: 100%;
			max-height: 100%;
			object-fit: contain;
		}

		.close-btn {
			position: absolute;
			top: -2rem;
			right: 0;
			font-size: 2rem;
			color: white;
			background: none;
			border: none;
			cursor: pointer;
		}

		/* ============== 响应式设计 ============== */
		@media (max-width: 1024px) {
			.article-nav {
				position: static;
				width: 100%;
				max-height: none;
				margin: 2rem 0;
				box-shadow: none;
				border: 1px solid var(--border-color);
			}
		}

		@media (max-width: 768px) {
			.blog-article {
				padding: 1rem;
			}

			.content-area {
				/* padding: 1.5rem; */
			}

			.article-title {
				font-size: 2rem;
			}

			.article-description {
				font-size: 1.125rem;
			}

			.article-meta {
				flex-direction: column;
				gap: 0.75rem;
			}
		}

		@media (max-width: 480px) {
			.article-title {
				font-size: 1.8rem;
			}
		}
	</style>
</Layout>
