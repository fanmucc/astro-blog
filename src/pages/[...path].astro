---
// 修复后的 src/pages/[...path].astro
import { getCollection, type CollectionEntry } from "astro:content";
import Layout from "../layouts/Layout.astro";
import {
	buildMenuTree,
	getPageByPath,
	type PageEntry,
	findMenuItemByPath,
} from "../utils/menu";

export async function getStaticPaths() {
	// 获取所有发布的页面
	const pages = await getCollection(
		"pages",
		({ data }: { data: PageEntry["data"] }) => {
			return data.published && !data.draft;
		}
	);

	console.log("生成静态路径，总页面数:", pages.length);

	const paths = [];

	for (const page of pages) {
		const pathParts = page.slug.split("/");
		console.log(`处理页面: ${page.slug}, 路径分段:`, pathParts);

		if (pathParts.length === 1) {
			// 单层页面，如 home -> /home
			const path = pathParts[0];
			paths.push({
				params: { path },
				props: { page },
			});
			console.log(`添加单层页面路径: /${path}`);
		} else if (pathParts.length === 2 && pathParts[1] === "index") {
			// 主菜单的index页面，如 home/index -> /home
			const path = pathParts[0];
			paths.push({
				params: { path },
				props: { page },
			});
			console.log(`添加主菜单index路径: /${path}`);
		} else if (pathParts.length === 2 && pathParts[1] !== "index") {
			// 二层页面，如 react/start -> /react/start
			const path = `${pathParts[0]}/${pathParts[1]}`;
			paths.push({
				params: { path },
				props: { page },
			});
			console.log(`添加二层页面路径: /${path}`);
		} else if (pathParts.length === 3 && pathParts[2] === "index") {
			// 子菜单的index页面，如 react/start/index -> /react/start
			const path = `${pathParts[0]}/${pathParts[1]}`;
			paths.push({
				params: { path },
				props: { page },
			});
			console.log(`添加子菜单index路径: /${path}`);
		} else if (pathParts.length === 3 && pathParts[2] !== "index") {
			// 具体页面，需要处理 pageName
			const pageName = page.data.pageName || pathParts[2];
			const path = `${pathParts[0]}/${pathParts[1]}/${pageName}`;
			paths.push({
				params: { path },
				props: { page },
			});
			console.log(
				`添加页面路径: /${path} (原文件: ${page.slug}, pageName: ${page.data.pageName})`
			);
		}
	}

	console.log(
		"生成的所有路径:",
		paths.map((p) => `/${p.params.path}`)
	);
	return paths;
}

type Props = {
	page: CollectionEntry<"pages">;
};

const { page } = Astro.props;
const { Content } = await page.render();

// 构建菜单树
const menuTree = await buildMenuTree();

// 获取当前路径
const currentPath = `/${Astro.params.path}`;

// SEO 数据
const seoTitle = page.data.seoTitle || page.data.title;
const seoDescription = page.data.seoDescription || page.data.description;
---

<Layout title={seoTitle} description={seoDescription}>
	<!-- 使用 CSS 变量的统一样式系统 -->
	<div class='page-container'>
		<!-- 顶部导航 -->
		<header class='header-nav'>
			<div class='px-4 lg:px-6'>
				<div class='flex h-16 items-center justify-between'>
					<!-- Logo -->
					<div class='flex items-center space-x-3'>
						<a href='/' class='flex items-center space-x-3 group'>
							<div class='logo-container'>
								<svg viewBox='0 0 120 120' class='h-10 w-10'>
									<defs>
										<linearGradient
											id='primaryGradient'
											x1='0%'
											y1='0%'
											x2='100%'
											y2='100%'
										>
											<stop
												offset='0%'
												style='stop-color:#f59e0b;stop-opacity:1'></stop>
											<stop
												offset='100%'
												style='stop-color:#d97706;stop-opacity:1'></stop>
										</linearGradient>
										<filter
											id='shadow'
											x='-20%'
											y='-20%'
											width='140%'
											height='140%'
										>
											<feDropShadow
												dx='1'
												dy='2'
												stdDeviation='2'
												flood-opacity='0.2'
												flood-color='#000'></feDropShadow>
										</filter>
									</defs>
									<circle
										cx='60'
										cy='60'
										r='56'
										fill='url(#primaryGradient)'
										filter='url(#shadow)'></circle>
									<g transform='translate(60, 60)'>
										<path
											d='M -20 -15 Q -25 -15 -25 -10 L -25 -5 Q -25 0 -30 0 Q -25 0 -25 5 L -25 10 Q -25 15 -20 15'
											stroke='white'
											stroke-width='3'
											fill='none'
											stroke-linecap='round'></path>
										<path
											d='M 20 -15 Q 25 -15 25 -10 L 25 -5 Q 25 0 30 0 Q 25 0 25 5 L 25 10 Q 25 15 20 15'
											stroke='white'
											stroke-width='3'
											fill='none'
											stroke-linecap='round'></path>
										<circle cx='-8' cy='-3' r='2' fill='white'></circle>
										<circle cx='0' cy='3' r='2' fill='white'></circle>
										<circle cx='8' cy='-3' r='2' fill='white'></circle>
									</g>
									<g opacity='0.3'>
										<polygon points='15,25 25,15 35,25' fill='white'></polygon>
										<polygon points='85,85 95,90 85,95 75,90' fill='white'
										></polygon>
									</g>
								</svg>
							</div>
							<div class='flex flex-col'>
								<span class='logo-title'> Fanmu </span>
								<span class='logo-subtitle'> yancode.life </span>
							</div>
						</a>
					</div>

					<!-- 搜索和主题切换 -->
					<div class='flex items-center space-x-3'>
						<div class='relative group'>
							<div class='relative'>
								<input
									type='search'
									placeholder='搜索'
									id='global-search'
									class='search-input w-64 pl-10 pr-4 py-2.5 text-sm rounded-lg focus:outline-none transition-all duration-200'
								/>
								<div
									class='absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none'
								>
									<svg
										class='h-4 w-4 search-icon'
										fill='none'
										stroke='currentColor'
										viewBox='0 0 24 24'
									>
										<path
											stroke-linecap='round'
											stroke-linejoin='round'
											stroke-width='2'
											d='M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z'></path>
									</svg>
								</div>
								<div class='absolute inset-y-0 right-0 pr-3 flex items-center'>
									<kbd
										class='search-kbd hidden sm:inline-flex h-5 select-none items-center gap-1 rounded px-1.5 font-mono text-xs'
									>
										<span class='text-xs'>⌘</span>K
									</kbd>
								</div>
							</div>
						</div>

						<button id='theme-toggle' class='nav-button' aria-label='切换主题'>
							<svg
								class='h-5 w-5 theme-icon-sun'
								fill='none'
								stroke='currentColor'
								viewBox='0 0 24 24'
								stroke-width='1.5'
							>
								<path
									stroke-linecap='round'
									stroke-linejoin='round'
									d='M12 3v2.25m6.364.386l-1.591 1.591M21 12h-2.25m-.386 6.364l-1.591-1.591M12 18.75V21m-4.773-4.227l-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0z'
								></path>
							</svg>
							<svg
								class='h-5 w-5 theme-icon-moon'
								fill='none'
								stroke='currentColor'
								viewBox='0 0 24 24'
								stroke-width='1.5'
							>
								<path
									stroke-linecap='round'
									stroke-linejoin='round'
									d='M21.752 15.002A9.718 9.718 0 0118 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 003 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 009.002-5.998z'
								></path>
							</svg>
						</button>
					</div>
				</div>
			</div>
		</header>

		<!-- 主要内容区域 -->
		<div class='main-layout'>
			<!-- 左侧边栏 -->
			<aside class='sidebar'>
				<div class='sidebar-content'>
					<!-- 主菜单 -->
					<div class='main-menu mb-6'>
						<nav class='space-y-1' id='main-menu'>
							{
								menuTree.map((menuItem) => (
									<a
										href={menuItem.path}
										data-menu={menuItem.value}
										data-path={menuItem.path}
										class={`main-menu-item group flex items-center w-full px-3 py-2.5 text-sm font-medium rounded-lg transition-colors duration-200 ${
											currentPath.startsWith(menuItem.path) ? "active" : ""
										}`}
									>
										{menuItem.icon && (
											<span class='main-menu-icon mr-3 h-5 w-5 flex items-center justify-center'>
												<svg
													class='w-5 h-5'
													fill='currentColor'
													viewBox='0 0 20 20'
												>
													<path d='M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z' />
												</svg>
											</span>
										)}
										<span class='flex-1'>{menuItem.label}</span>
									</a>
								))
							}
						</nav>
					</div>

					<!-- 当前菜单的子菜单 -->
					{
						(() => {
							const currentMainMenu = menuTree.find((item) =>
								currentPath.startsWith(item.path)
							);
							if (
								currentMainMenu &&
								currentMainMenu.children &&
								currentMainMenu.children.length > 0
							) {
								return (
									<div class='submenu-section'>
										<div class='sub-menu-title px-3 mb-3'>
											{currentMainMenu.label} - 子菜单
										</div>
										<div class='space-y-1'>
											{currentMainMenu.children.map((subItem) => {
												const isActive =
													currentPath === subItem.path ||
													currentPath.startsWith(subItem.path + "/");
												const hasChildren =
													subItem.children && subItem.children.length > 0;

												return (
													<div class='submenu-section-item'>
														<a
															href={subItem.path}
															class={`section-header flex items-center py-3 cursor-pointer rounded-md transition-colors duration-200 ${
																isActive ? "active" : ""
															}`}
														>
															{hasChildren && (
																<span
																	class={`expand-arrow w-6 h-6 flex items-center justify-center ${
																		isActive ? "rotate-90" : ""
																	}`}
																>
																	<svg
																		width='24'
																		height='24'
																		viewBox='0 0 24 24'
																		fill='none'
																		stroke='currentColor'
																		stroke-width='2'
																	>
																		<path d='m9 18 6-6-6-6' />
																	</svg>
																</span>
															)}
															<span
																class={`section-title text-sm font-medium ml-3 ${isActive ? "active" : ""}`}
															>
																{subItem.label}
															</span>
														</a>

														{hasChildren && isActive && subItem.children && (
															<div class='section-children relative block ml-3'>
																<div class='submenu-divider absolute left-3 top-0 bottom-0 w-px' />
																{subItem.children.map((childItem) => (
																	<div class='submenu-item relative'>
																		<a
																			href={childItem.path}
																			class={`submenu-link flex items-center py-3 text-sm group cursor-pointer ${
																				currentPath === childItem.path
																					? "active"
																					: ""
																			}`}
																		>
																			<div
																				class={`submenu-vertical-line w-px h-full transition-all duration-200 relative z-10 ${
																					currentPath === childItem.path
																						? "active"
																						: ""
																				}`}
																			/>
																			<span
																				class={`submenu-text ml-9 ${
																					currentPath === childItem.path
																						? "active"
																						: ""
																				}`}
																			>
																				{childItem.label}
																			</span>
																		</a>
																	</div>
																))}
															</div>
														)}
													</div>
												);
											})}
										</div>
									</div>
								);
							}
							return null;
						})()
					}
				</div>
			</aside>

			<!-- 主内容区 -->
			<main class='main-content'>
				<div class='content-padding'>
					<!-- 文章内容 -->
					<article class='content-article'>
						<header class='content-header'>
							<h1 class='content-title'>
								{page.data.title}
							</h1>
							{
								page.data.description && (
									<p class='content-description'>{page.data.description}</p>
								)
							}
							<div class='content-meta'>
								<span>作者: {page.data.author}</span>
								<span>
									创建于: {page.data.createdAt.toLocaleDateString("zh-CN")}
								</span>
								{
									page.data.updatedAt && (
										<span>
											更新于: {page.data.updatedAt.toLocaleDateString("zh-CN")}
										</span>
									)
								}
								{
									page.data.readingTime && (
										<span>阅读时间: {page.data.readingTime} 分钟</span>
									)
								}
							</div>
						</header>
						<div class='content-body'>
							<Content />
						</div>
					</article>

					<!-- 标签 -->
					{
						page.data.tags.length > 0 && (
							<div class='tags-section'>
								<h3 class='tags-title'>标签</h3>
								<div class='tags-container'>
									{page.data.tags.map((tag) => (
										<span class='tag-item'>#{tag}</span>
									))}
								</div>
							</div>
						)
					}
				</div>
			</main>
		</div>
	</div>

	<!-- JavaScript -->
	<script define:vars={{ menuTree, currentPath }}>
		// 主题切换功能
		const themeToggle = document.getElementById("theme-toggle");

		function toggleTheme() {
			const html = document.documentElement;
			const isDark = html.classList.contains("dark");

			if (isDark) {
				html.classList.remove("dark");
				localStorage.setItem("theme", "light");
			} else {
				html.classList.add("dark");
				localStorage.setItem("theme", "dark");
			}
		}

		function initTheme() {
			const savedTheme = localStorage.getItem("theme");
			const prefersDark = window.matchMedia(
				"(prefers-color-scheme: dark)"
			).matches;

			if (savedTheme === "dark" || (!savedTheme && prefersDark)) {
				document.documentElement.classList.add("dark");
			}
		}

		// 查找菜单项
		function findMenuItemByPath(menuTree, targetPath) {
			function searchMenu(items) {
				for (const item of items) {
					if (item.path === targetPath) {
						return item;
					}
					if (item.children && item.children.length > 0) {
						const found = searchMenu(item.children);
						if (found) return found;
					}
				}
				return null;
			}
			return searchMenu(menuTree);
		}

		// 初始化
		initTheme();
		themeToggle?.addEventListener("click", toggleTheme);

		// 平滑滚动增强
		document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
			anchor.addEventListener("click", function (e) {
				e.preventDefault();
				const target = document.querySelector(this.getAttribute("href"));
				if (target) {
					target.scrollIntoView({
						behavior: "smooth",
						block: "start",
					});
				}
			});
		});
	</script>

	<style>
		/* 导入全局样式 */
		@import "../styles/global.css";

		/* 页面容器 */
		.page-container {
			height: 100vh;
			background-color: var(--g-bg);
			margin: 0;
			overflow: hidden;
		}

		/* 顶部导航样式 */
		.header-nav {
			position: sticky;
			top: 0;
			z-index: 50;
			width: 100%;
			border-bottom: 1px solid var(--h-nav-border);
			background-color: var(--h-nav-bg);
			backdrop-filter: blur(12px);
		}

		.logo-container {
			display: flex;
			height: 2.5rem;
			width: 2.5rem;
			align-items: center;
			justify-content: center;
			border-radius: 0.5rem;
			box-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05);
			transition: all var(--transition-fast);
		}

		.logo-container:hover {
			box-shadow:
				0 4px 6px -1px rgb(0 0 0 / 0.1),
				0 2px 4px -2px rgb(0 0 0 / 0.1);
		}

		.logo-title {
			font-size: 1.25rem;
			font-weight: 700;
			color: var(--h-nav-text);
			transition: color var(--transition-fast);
			line-height: 1.2;
		}

		.logo-subtitle {
			font-size: 0.75rem;
			font-weight: 500;
			color: var(--g-text-tertiary);
			line-height: 1;
		}

		.nav-button {
			padding: 0.5rem;
			border-radius: 0.5rem;
			transition: all var(--transition-fast);
			color: var(--g-text-secondary);
			background-color: transparent;
			border: none;
			cursor: pointer;
		}

		.nav-button:hover {
			color: var(--h-nav-text-hover);
			background-color: var(--a-main-item-bg-hover);
		}

		.nav-button:focus {
			outline: none;
		}

		/* 搜索框样式 */
		.search-input {
			background-color: var(--s-input-bg);
			border: 1px solid var(--s-input-border);
			color: var(--s-input-text);
			transition: border-color var(--transition-fast);
		}

		.search-input:focus {
			border-color: var(--s-input-border-focus);
			box-shadow: 0 0 0 3px rgba(251, 146, 60, 0.1);
		}

		.search-input::placeholder {
			color: var(--s-input-placeholder);
		}

		.search-icon {
			color: var(--s-input-placeholder);
		}

		.search-kbd {
			border: 1px solid var(--g-border);
			background-color: var(--g-bg-tertiary);
			color: var(--g-text-tertiary);
		}

		/* 主题切换图标 */
		.theme-icon-sun {
			display: none;
		}

		.theme-icon-moon {
			display: block;
		}

		.dark .theme-icon-sun {
			display: block;
		}

		.dark .theme-icon-moon {
			display: none;
		}

		/* 主布局 */
		.main-layout {
			display: flex;
			height: calc(100vh - 4rem);
		}

		/* 侧边栏 */
		.sidebar {
			width: 16rem;
			flex-shrink: 0;
			border-right: 1px solid var(--a-sidebar-border);
			background-color: var(--a-sidebar-bg);
			display: flex;
			flex-direction: column;
			height: 100%;
		}

		.sidebar-content {
			flex: 1;
			overflow-y: auto;
			padding: 0.5rem 0.5rem 1rem;
			scrollbar-width: thin;
			scrollbar-color: var(--g-border) transparent;
		}

		.sidebar-content::-webkit-scrollbar {
			width: 3px;
		}

		.sidebar-content::-webkit-scrollbar-track {
			background: transparent;
		}

		.sidebar-content::-webkit-scrollbar-thumb {
			background: var(--g-border);
			border-radius: 2px;
		}

		.sidebar-content::-webkit-scrollbar-thumb:hover {
			background: var(--g-border-dark);
		}

		/* 子菜单区域 */
		.submenu-section {
			padding: 0.5rem 1rem 0;
			border-color: var(--a-sidebar-border);
		}

		/* 主内容区 */
		.main-content {
			flex: 1;
			overflow-y: auto;
			height: 100%;
			background-color: var(--m-content-bg);
		}

		.content-padding {
			padding: 1.5rem 1.5rem;
		}

		@media (min-width: 1024px) {
			.content-padding {
				padding: 1.5rem 2rem;
			}
		}

		/* 内容区域 */
		.content-article {
			max-width: none;
		}

		.content-header {
			margin-bottom: 2rem;
		}

		.content-title {
			font-size: 2.25rem;
			font-weight: 700;
			color: var(--m-content-heading);
			margin-bottom: 1rem;
		}

		.content-description {
			font-size: 1.25rem;
			color: var(--g-text-secondary);
			margin-bottom: 1.5rem;
		}

		.content-meta {
			display: flex;
			align-items: center;
			gap: 1rem;
			font-size: 0.875rem;
			color: var(--g-text-tertiary);
			border-bottom: 1px solid var(--m-content-border);
			padding-bottom: 1rem;
		}

		.content-body {
			color: var(--m-content-text);
		}

		/* 标签样式 */
		.tags-section {
			margin-top: 2rem;
			padding-top: 2rem;
			border-top: 1px solid var(--m-content-border);
		}

		.tags-title {
			font-size: 1.125rem;
			font-weight: 600;
			color: var(--m-content-heading);
			margin-bottom: 1rem;
		}

		.tags-container {
			display: flex;
			flex-wrap: wrap;
			gap: 0.5rem;
		}

		.tag-item {
			padding: 0.25rem 0.75rem;
			font-size: 0.875rem;
			font-weight: 500;
			background-color: var(--g-bg-tertiary);
			color: var(--g-text-secondary);
			border-radius: 9999px;
			transition: all var(--transition-fast);
		}

		.tag-item:hover {
			background-color: var(--a-sub-item-bg-active);
			color: var(--a-sub-item-text-active);
		}

		/* 菜单样式 */
		.main-menu-item {
			background-color: var(--a-main-item-bg);
			color: var(--a-main-item-text);
			transition: all var(--transition-normal);
			text-decoration: none;
		}

		.main-menu-item:hover {
			background-color: var(--a-main-item-bg-hover);
			color: var(--a-main-item-text-hover);
		}

		.main-menu-item.active {
			background-color: var(--a-main-item-bg-active);
			color: var(--a-main-item-text-active);
			box-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05);
		}

		.main-menu-icon {
			color: var(--a-main-icon);
		}

		.main-menu-item.active .main-menu-icon {
			color: var(--a-main-icon-active);
		}

		/* 子菜单样式 */
		.section-header {
			transition: all var(--transition-fast);
			text-decoration: none;
		}

		.section-header:hover {
			background-color: var(--a-sub-item-bg-hover);
		}

		.section-header.active {
			background-color: var(--a-sub-item-bg-active);
		}

		.section-title {
			color: var(--m-content-heading);
		}

		.section-title.active {
			color: var(--a-sub-item-text-active);
		}

		.expand-arrow {
			color: var(--g-text-secondary);
			transition: transform var(--transition-fast);
		}

		.expand-arrow.rotate-90 {
			transform: rotate(90deg);
		}

		.submenu-divider {
			background-color: var(--a-sub-border);
		}

		.submenu-link {
			text-decoration: none;
		}

		.submenu-vertical-line {
			background-color: var(--a-sub-border);
			transition: all var(--transition-fast);
			transform-origin: center;
		}

		.submenu-link:hover .submenu-vertical-line {
			background-color: var(--a-sub-border-active);
			transform: scaleX(2);
		}

		.submenu-vertical-line.active {
			background-color: var(--a-sub-border-active);
			transform: scaleX(3);
			filter: drop-shadow(0 0 3px rgba(251, 146, 60, 0.6));
		}

		.submenu-text {
			color: var(--a-sub-item-text);
			transition: color var(--transition-fast);
		}

		.submenu-link:hover .submenu-text {
			color: var(--a-sub-item-text-hover);
		}

		.submenu-text.active {
			color: var(--a-sub-item-text-active);
			font-weight: 500;
		}

		/* 增强的内容样式 */
		.content-body {
			color: var(--m-content-text);
			max-width: none;
		}

		.content-body h1,
		.content-body h2,
		.content-body h3,
		.content-body h4 {
			color: var(--m-content-heading);
			scroll-margin-top: 6rem;
		}

		.content-body h1 {
			font-size: 2.25rem;
			font-weight: 700;
			margin-top: 2rem;
			margin-bottom: 1.5rem;
		}

		.content-body h2 {
			font-size: 1.875rem;
			font-weight: 700;
			margin-top: 2rem;
			margin-bottom: 1rem;
			padding-bottom: 0.5rem;
			border-bottom: 1px solid var(--m-content-border);
		}

		.content-body h3 {
			font-size: 1.5rem;
			font-weight: 600;
			margin-top: 1.5rem;
			margin-bottom: 0.75rem;
		}

		.content-body h4 {
			font-size: 1.25rem;
			font-weight: 500;
			margin-top: 1rem;
			margin-bottom: 0.5rem;
		}

		.content-body p {
			margin-bottom: 1rem;
			line-height: 1.75;
		}

		.content-body a {
			color: var(--m-content-link);
			font-weight: 500;
			text-decoration: none;
			transition: color var(--transition-fast);
		}

		.content-body a:hover {
			color: var(--m-content-link-hover);
			text-decoration: underline;
			text-underline-offset: 2px;
		}

		.content-body code {
			background-color: var(--code-bg);
			color: var(--code-text);
			padding: 0.125rem 0.375rem;
			border-radius: 0.25rem;
			font-size: 0.875em;
			font-family: "JetBrains Mono", "Fira Code", "Cascadia Code", monospace;
		}

		.content-body pre {
			background-color: var(--code-block-bg);
			color: var(--code-block-text);
			padding: 1rem;
			border-radius: 0.5rem;
			overflow-x: auto;
			margin: 1.5rem 0;
			border: 1px solid var(--code-block-border);
		}

		.content-body pre code {
			background-color: transparent;
			color: var(--code-block-text);
			padding: 0;
			font-size: 0.875rem;
		}

		.content-body blockquote {
			border-left: 4px solid rgb(var(--color-primary));
			background-color: rgba(251, 146, 60, 0.05);
			padding: 0.5rem 1rem;
			font-style: italic;
			margin: 1.5rem 0;
			color: var(--m-content-text);
		}

		.dark .content-body blockquote {
			background-color: rgba(251, 146, 60, 0.1);
		}

		.content-body ul,
		.content-body ol {
			margin-bottom: 1rem;
			padding-left: 1.5rem;
		}

		.content-body li {
			margin-bottom: 0.5rem;
			line-height: 1.75;
		}

		.content-body ul li {
			list-style-type: disc;
		}

		.content-body ol li {
			list-style-type: decimal;
		}

		/* 表格样式 */
		.content-body table {
			width: 100%;
			border-collapse: collapse;
			margin: 1.5rem 0;
			border: 1px solid var(--m-content-border);
			border-radius: 0.5rem;
			overflow: hidden;
		}

		.content-body th,
		.content-body td {
			border: 1px solid var(--m-content-border);
			padding: 0.75rem 1rem;
			text-align: left;
		}

		.content-body th {
			background-color: var(--g-bg-tertiary);
			font-weight: 600;
			color: var(--m-content-heading);
		}

		/* 图片样式 */
		.content-body img {
			border-radius: 0.5rem;
			box-shadow:
				0 4px 6px -1px rgb(0 0 0 / 0.1),
				0 2px 4px -2px rgb(0 0 0 / 0.1);
			margin: 1.5rem 0;
			max-width: 100%;
			height: auto;
		}

		/* 强调样式 */
		.content-body strong {
			font-weight: 600;
			color: var(--m-content-heading);
		}

		.content-body em {
			font-style: italic;
		}

		/* 水平分割线 */
		.content-body hr {
			border: none;
			height: 1px;
			background: var(--m-content-border);
			margin: 2rem 0;
		}

		/* 响应式设计 */
		@media (max-width: 768px) {
			.sidebar {
				width: 14rem;
			}

			.content-padding {
				padding: 1rem;
			}

			.content-title {
				font-size: 1.875rem;
			}

			.content-description {
				font-size: 1.125rem;
			}

			.content-meta {
				flex-direction: column;
				align-items: flex-start;
				gap: 0.5rem;
			}

			.main-menu-item {
				padding: 0.75rem;
				font-size: 0.875rem;
			}

			.search-input {
				width: 12rem;
			}
		}

		/* 平板优化 */
		@media (min-width: 769px) and (max-width: 1024px) {
			.sidebar {
				width: 15rem;
			}

			.content-padding {
				padding: 1.25rem 1.5rem;
			}

			.search-input {
				width: 14rem;
			}
		}

		/* 大屏优化 */
		@media (min-width: 1280px) {
			.sidebar {
				width: 18rem;
			}

			.content-padding {
				padding: 2rem 3rem;
			}

			.content-title {
				font-size: 2.5rem;
			}

			.content-description {
				font-size: 1.375rem;
			}
		}

		/* 移除所有默认焦点和边框样式 */
		button:focus,
		button:active,
		button:hover,
		input:focus,
		input:active,
		a:focus,
		a:active {
			outline: none !important;
			border: none !important;
			box-shadow: none !important;
		}

		/* 搜索框特殊处理 */
		.search-input:focus {
			border: 1px solid var(--s-input-border-focus) !important;
			box-shadow: 0 0 0 3px rgba(251, 146, 60, 0.1) !important;
		}

		/* 平滑滚动 */
		html {
			scroll-behavior: smooth;
			scroll-padding-top: 5rem;
		}

		/* 选择文本样式 */
		::selection {
			background-color: rgba(251, 146, 60, 0.2);
			color: #c2410c;
		}

		.dark ::selection {
			background-color: rgba(251, 146, 60, 0.3);
			color: #fed7aa;
		}
	</style></Layout
>
