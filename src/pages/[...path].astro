---
import { getCollection, type CollectionEntry } from "astro:content";
import Layout from "../layouts/Layout.astro";
import { buildMenuTree, getPageByPath } from "../utils/menu";

export async function getStaticPaths() {
	// 获取所有发布的页面
	const pages = await getCollection("pages", ({ data }) => {
		return data.published && !data.draft;
	});

	return pages.map((page) => {
		const pathParts = page.slug.split("/");
		let path: string;

		if (pathParts.length === 2 && pathParts[1] === "index") {
			// 主菜单的index页面，如 home/index -> /home
			path = pathParts[0];
		} else if (pathParts.length === 3 && pathParts[2] === "index") {
			// 子菜单的index页面，如 react/开始学习/index -> /react/开始学习
			path = `${pathParts[0]}/${pathParts[1]}`;
		} else {
			// 普通页面，如 react/开始学习/环境搭建 -> /react/开始学习/环境搭建
			path = page.slug;
		}

		return {
			params: { path },
			props: { page },
		};
	});
}

type Props = {
	page: CollectionEntry<"pages">;
};

const { page } = Astro.props;
const { Content } = await page.render();

// 构建菜单树
const menuTree = await buildMenuTree();

// 获取当前路径
const currentPath = `/${Astro.params.path}`;

// SEO 数据
const seoTitle = page.data.seoTitle || page.data.title;
const seoDescription = page.data.seoDescription || page.data.description;
---

<Layout title={seoTitle} description={seoDescription}>
	<div class='h-screen bg-white dark:bg-gray-900 m-0 overflow-hidden'>
		<!-- 顶部导航 -->
		<header
			class='sticky top-0 z-50 w-full border-b border-gray-200 bg-white/80 backdrop-blur-md dark:border-gray-800 dark:bg-gray-900/80'
		>
			<div class='px-4 lg:px-6'>
				<div class='flex h-16 items-center justify-between'>
					<!-- Logo -->
					<div class='flex items-center space-x-3'>
						<a href='/' class='flex items-center space-x-3 group'>
							<div
								class='flex h-10 w-10 items-center justify-center rounded-lg shadow-sm group-hover:shadow-md transition-all duration-200'
							>
								<svg viewBox='0 0 120 120' class='h-10 w-10'>
									<defs>
										<linearGradient
											id='primaryGradient'
											x1='0%'
											y1='0%'
											x2='100%'
											y2='100%'
										>
											<stop
												offset='0%'
												style='stop-color:#f59e0b;stop-opacity:1'></stop>
											<stop
												offset='100%'
												style='stop-color:#d97706;stop-opacity:1'></stop>
										</linearGradient>
										<filter
											id='shadow'
											x='-20%'
											y='-20%'
											width='140%'
											height='140%'
										>
											<feDropShadow
												dx='1'
												dy='2'
												stdDeviation='2'
												flood-opacity='0.2'
												flood-color='#000'></feDropShadow>
										</filter>
									</defs>
									<circle
										cx='60'
										cy='60'
										r='56'
										fill='url(#primaryGradient)'
										filter='url(#shadow)'></circle>
									<g transform='translate(60, 60)'>
										<path
											d='M -20 -15 Q -25 -15 -25 -10 L -25 -5 Q -25 0 -30 0 Q -25 0 -25 5 L -25 10 Q -25 15 -20 15'
											stroke='white'
											stroke-width='3'
											fill='none'
											stroke-linecap='round'></path>
										<path
											d='M 20 -15 Q 25 -15 25 -10 L 25 -5 Q 25 0 30 0 Q 25 0 25 5 L 25 10 Q 25 15 20 15'
											stroke='white'
											stroke-width='3'
											fill='none'
											stroke-linecap='round'></path>
										<circle cx='-8' cy='-3' r='2' fill='white'></circle>
										<circle cx='0' cy='3' r='2' fill='white'></circle>
										<circle cx='8' cy='-3' r='2' fill='white'></circle>
									</g>
									<g opacity='0.3'>
										<polygon points='15,25 25,15 35,25' fill='white'></polygon>
										<polygon points='85,85 95,90 85,95 75,90' fill='white'
										></polygon>
									</g>
								</svg>
							</div>
							<div class='flex flex-col'>
								<span
									class='text-xl font-bold text-gray-900 dark:text-gray-100 group-hover:text-orange-600 dark:group-hover:text-orange-400 transition-colors duration-200 leading-tight'
								>
									Fanmu
								</span>
								<span
									class='text-xs text-gray-500 dark:text-gray-400 font-medium leading-none'
								>
									yancode.life
								</span>
							</div>
						</a>
					</div>

					<!-- 搜索和主题切换 -->
					<div class='flex items-center space-x-3'>
						<div class='relative group'>
							<div class='relative'>
								<input
									type='search'
									placeholder='搜索'
									id='global-search'
									class='w-64 pl-10 pr-4 py-2.5 text-sm bg-gray-50 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all duration-200 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-100 dark:placeholder-gray-400 dark:focus:ring-orange-600'
								/>
								<div
									class='absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none'
								>
									<svg
										class='h-4 w-4 text-gray-400 dark:text-gray-500'
										fill='none'
										stroke='currentColor'
										viewBox='0 0 24 24'
									>
										<path
											stroke-linecap='round'
											stroke-linejoin='round'
											stroke-width='2'
											d='M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z'></path>
									</svg>
								</div>
								<div class='absolute inset-y-0 right-0 pr-3 flex items-center'>
									<kbd
										class='hidden sm:inline-flex h-5 select-none items-center gap-1 rounded border border-gray-200 bg-gray-100 px-1.5 font-mono text-xs text-gray-600 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-400'
									>
										<span class='text-xs'>⌘</span>K
									</kbd>
								</div>
							</div>
						</div>

						<button
							id='theme-toggle'
							class='text-gray-500 hover:text-gray-700 transition-colors duration-200 dark:text-gray-400 dark:hover:text-gray-200 border-none bg-none'
							style='border: none; background: none; padding: 0; margin: 0;'
							aria-label='切换主题'
						>
							<svg
								class='h-5 w-5 hidden dark:block'
								fill='none'
								stroke='currentColor'
								viewBox='0 0 24 24'
								stroke-width='1.5'
							>
								<path
									stroke-linecap='round'
									stroke-linejoin='round'
									d='M12 3v2.25m6.364.386l-1.591 1.591M21 12h-2.25m-.386 6.364l-1.591-1.591M12 18.75V21m-4.773-4.227l-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0z'
								></path>
							</svg>
							<svg
								class='h-5 w-5 block dark:hidden'
								fill='none'
								stroke='currentColor'
								viewBox='0 0 24 24'
								stroke-width='1.5'
							>
								<path
									stroke-linecap='round'
									stroke-linejoin='round'
									d='M21.752 15.002A9.718 9.718 0 0118 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 003 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 009.002-5.998z'
								></path>
							</svg>
						</button>
					</div>
				</div>
			</div>
		</header>

		<!-- 面包屑导航 -->
		<nav
			class='border-b border-gray-200 bg-white dark:border-gray-800 dark:bg-gray-900'
		>
			<div class='container mx-auto px-4 py-3'>
				<ol
					class='flex items-center space-x-2 text-sm text-gray-500 dark:text-gray-400'
					id='breadcrumb'
				>
					<!-- 面包屑将通过 JavaScript 生成 -->
				</ol>
			</div>
		</nav>

		<!-- 主要内容区域 -->
		<div class='flex' style='height: calc(100vh - 7rem);'>
			<!-- 左侧边栏 -->
			<aside
				class='w-64 flex-shrink-0 border-r border-gray-200 bg-white dark:border-gray-800 dark:bg-gray-900 flex flex-col h-full'
			>
				<div class='flex-1 overflow-y-auto px-2 py-4 sidebar-scroll'>
					<!-- 主菜单 -->
					<div class='mb-6 bg-gray-50 dark:bg-gray-800 rounded-lg p-2'>
						<nav class='space-y-1' id='main-menu'>
							{
								menuTree.map((menuItem) => (
									<a
										href={menuItem.path}
										data-menu={menuItem.value}
										data-path={menuItem.path}
										class={`menu-item group flex items-center w-full px-3 py-2.5 text-sm font-medium rounded-lg transition-colors duration-200 ${
											currentPath.startsWith(menuItem.path)
												? "bg-white text-gray-900 shadow-sm dark:bg-gray-700 dark:text-gray-100"
												: "text-gray-700 hover:bg-gray-100 hover:text-gray-900 dark:text-gray-300 dark:hover:bg-gray-700 dark:hover:text-gray-100"
										}`}
									>
										{menuItem.icon && (
											<span
												class={`mr-3 h-5 w-5 flex items-center justify-center ${
													currentPath.startsWith(menuItem.path)
														? "text-orange-600 dark:text-orange-400"
														: "text-orange-500"
												}`}
											>
												<svg
													class='w-5 h-5'
													fill='currentColor'
													viewBox='0 0 20 20'
												>
													<path d='M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z' />
												</svg>
											</span>
										)}
										<span class='flex-1'>{menuItem.label}</span>
									</a>
								))
							}
						</nav>
					</div>

					<!-- 当前菜单的子菜单 -->
					{
						(() => {
							const currentMainMenu = menuTree.find((item) =>
								currentPath.startsWith(item.path)
							);
							if (
								currentMainMenu &&
								currentMainMenu.children &&
								currentMainMenu.children.length > 0
							) {
								return (
									<div class='border-gray-200 dark:border-gray-700 px-2 pt-4'>
										<div class='text-sm text-gray-500 dark:text-gray-400 px-3 mb-3'>
											{currentMainMenu.label} - 子菜单
										</div>
										<div class='space-y-1'>
											{currentMainMenu.children.map((subItem) => {
												const isActive =
													currentPath === subItem.path ||
													currentPath.startsWith(subItem.path + "/");
												const hasChildren =
													subItem.children && subItem.children.length > 0;

												return (
													<div class='submenu-section'>
														<a
															href={subItem.path}
															class={`section-header flex items-center py-3 cursor-pointer rounded-md transition-colors duration-200 ${
																isActive
																	? "bg-orange-50 dark:bg-orange-900/20"
																	: "hover:bg-gray-50 dark:hover:bg-gray-800"
															}`}
														>
															{hasChildren && (
																<span
																	class={`expand-arrow text-gray-500 dark:text-gray-400 transition-transform duration-200 w-6 h-6 flex items-center justify-center ${
																		isActive ? "rotate-90" : ""
																	}`}
																>
																	<svg
																		width='24'
																		height='24'
																		viewBox='0 0 24 24'
																		fill='none'
																		stroke='currentColor'
																		stroke-width='2'
																	>
																		<path d='m9 18 6-6-6-6' />
																	</svg>
																</span>
															)}
															<span
																class={`text-sm font-medium ml-3 ${
																	isActive
																		? "text-orange-700 dark:text-orange-300"
																		: "text-gray-900 dark:text-gray-100"
																}`}
															>
																{subItem.label}
															</span>
														</a>

														{hasChildren && isActive && (
															<div class='section-children relative block ml-3'>
																<div class='absolute left-3 top-0 bottom-0 w-px bg-gray-200 dark:bg-gray-700' />
																{subItem.children.map((childItem) => (
																	<div class='submenu-item relative'>
																		<a
																			href={childItem.path}
																			class={`flex items-center py-3 text-sm group cursor-pointer ${
																				currentPath === childItem.path
																					? "active"
																					: ""
																			}`}
																		>
																			<div
																				class={`submenu-vertical-line w-px h-full transition-all duration-200 relative z-10 ${
																					currentPath === childItem.path
																						? "bg-orange-500 dark:bg-orange-400"
																						: "bg-gray-300 dark:bg-gray-600 group-hover:bg-orange-400 dark:group-hover:bg-orange-500"
																				}`}
																			/>
																			<span
																				class={`ml-9 ${
																					currentPath === childItem.path
																						? "text-orange-700 dark:text-orange-300 font-medium"
																						: "text-gray-700 dark:text-gray-300 group-hover:text-gray-900 dark:group-hover:text-gray-100"
																				}`}
																			>
																				{childItem.label}
																			</span>
																		</a>
																	</div>
																))}
															</div>
														)}
													</div>
												);
											})}
										</div>
									</div>
								);
							}
							return null;
						})()
					}
				</div>
			</aside>

			<!-- 主内容区 -->
			<main class='flex-1 overflow-y-auto h-full main-content'>
				<div class='px-6 py-6 lg:px-8'>
					<!-- 文章内容 -->
					<article
						class='prose prose-lg max-w-none prose-gray dark:prose-invert'
					>
						<header class='mb-8'>
							<h1
								class='text-4xl font-bold text-gray-900 dark:text-gray-100 mb-4'
							>
								{page.data.title}
							</h1>
							{
								page.data.description && (
									<p class='text-xl text-gray-600 dark:text-gray-400 mb-6'>
										{page.data.description}
									</p>
								)
							}
							<div
								class='flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400 border-b border-gray-200 dark:border-gray-800 pb-4'
							>
								<span>作者: {page.data.author}</span>
								<span
									>创建于: {
										page.data.createdAt.toLocaleDateString("zh-CN")
									}</span
								>
								{
									page.data.updatedAt && (
										<span>
											更新于: {page.data.updatedAt.toLocaleDateString("zh-CN")}
										</span>
									)
								}
								{
									page.data.readingTime && (
										<span>阅读时间: {page.data.readingTime} 分钟</span>
									)
								}
							</div>
						</header>
						<Content />
					</article>

					<!-- 标签 -->
					{
						page.data.tags.length > 0 && (
							<div class='mt-8 pt-8 border-t border-gray-200 dark:border-gray-800'>
								<h3 class='text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4'>
									标签
								</h3>
								<div class='flex flex-wrap gap-2'>
									{page.data.tags.map((tag) => (
										<span class='px-3 py-1 text-sm font-medium bg-gray-100 text-gray-700 rounded-full dark:bg-gray-800 dark:text-gray-300'>
											#{tag}
										</span>
									))}
								</div>
							</div>
						)
					}
				</div>
			</main>
		</div>
	</div>

	<!-- JavaScript -->
	<script define:vars={{ menuTree, currentPath }}>
		// 主题切换功能
		const themeToggle = document.getElementById("theme-toggle");

		function toggleTheme() {
			const html = document.documentElement;
			const isDark = html.classList.contains("dark");

			if (isDark) {
				html.classList.remove("dark");
				localStorage.setItem("theme", "light");
			} else {
				html.classList.add("dark");
				localStorage.setItem("theme", "dark");
			}
		}

		function initTheme() {
			const savedTheme = localStorage.getItem("theme");
			const prefersDark = window.matchMedia(
				"(prefers-color-scheme: dark)"
			).matches;

			if (savedTheme === "dark" || (!savedTheme && prefersDark)) {
				document.documentElement.classList.add("dark");
			}
		}

		// 生成面包屑导航
		function generateBreadcrumb() {
			const breadcrumb = document.getElementById("breadcrumb");
			const pathParts = currentPath.split("/").filter((part) => part);

			let breadcrumbHtml =
				'<li><a href="/" class="hover:text-gray-700 dark:hover:text-gray-300">首页</a></li>';

			let currentPath_ = "";
			pathParts.forEach((part, index) => {
				currentPath_ += "/" + part;
				const isLast = index === pathParts.length - 1;

				// 查找对应的菜单项获取标签
				const menuItem = findMenuItemByPath(menuTree, currentPath_);
				const label = menuItem ? menuItem.label : decodeURIComponent(part);

				breadcrumbHtml += `
          <li class="flex items-center">
            <svg class="h-4 w-4 mx-2" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
            </svg>
            ${
							isLast
								? `<span class="text-gray-900 dark:text-gray-100">${label}</span>`
								: `<a href="${currentPath_}" class="hover:text-gray-700 dark:hover:text-gray-300">${label}</a>`
						}
          </li>
        `;
			});

			breadcrumb.innerHTML = breadcrumbHtml;
		}

		// 查找菜单项
		function findMenuItemByPath(menuTree, targetPath) {
			function searchMenu(items) {
				for (const item of items) {
					if (item.path === targetPath) {
						return item;
					}
					if (item.children && item.children.length > 0) {
						const found = searchMenu(item.children);
						if (found) return found;
					}
				}
				return null;
			}
			return searchMenu(menuTree);
		}

		// 搜索功能
		const searchInput = document.getElementById("global-search");
		let searchTimeout;

		// 键盘快捷键
		document.addEventListener("keydown", (e) => {
			if ((e.metaKey || e.ctrlKey) && e.key === "k") {
				e.preventDefault();
				searchInput?.focus();
			}

			if (e.key === "Escape") {
				searchInput?.blur();
			}
		});

		// 搜索输入处理
		searchInput?.addEventListener("input", (e) => {
			clearTimeout(searchTimeout);
			const query = e.target.value.trim();

			searchTimeout = setTimeout(() => {
				if (query.length > 0) {
					performSearch(query);
				}
			}, 300);
		});

		// 执行搜索
		async function performSearch(query) {
			try {
				const response = await fetch(
					`/api/search?q=${encodeURIComponent(query)}`
				);
				const results = await response.json();

				if (results.length > 0) {
					// 跳转到第一个搜索结果
					window.location.href = results[0].path;
				}
			} catch (error) {
				console.error("搜索出错:", error);
			}
		}

		// 初始化
		initTheme();
		themeToggle?.addEventListener("click", toggleTheme);
		generateBreadcrumb();

		// 平滑滚动增强
		document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
			anchor.addEventListener("click", function (e) {
				e.preventDefault();
				const target = document.querySelector(this.getAttribute("href"));
				if (target) {
					target.scrollIntoView({
						behavior: "smooth",
						block: "start",
					});
				}
			});
		});
	</script>

	<style>
		/* 导入全局样式 */
		@import "../styles/global.css";

		/* 菜单样式 */
		.menu-item.active {
			@apply bg-white text-gray-900 shadow-sm;
			@apply dark:bg-gray-700 dark:text-gray-100;
		}

		.menu-item.active svg {
			@apply text-orange-600 dark:text-orange-400;
		}

		/* 子菜单样式 */
		.submenu-item.active a {
			@apply text-orange-700 dark:text-orange-300 font-medium;
		}

		.submenu-vertical-line {
			@apply transition-all duration-200 ease-in-out relative z-10;
			transform-origin: center;
		}

		.submenu-item:hover .submenu-vertical-line {
			transform: scaleX(2);
		}

		.submenu-item.active .submenu-vertical-line {
			transform: scaleX(3);
			filter: drop-shadow(0 0 3px rgba(251, 146, 60, 0.6));
		}

		/* 增强的 prose 样式 */
		.prose {
			@apply text-gray-800 dark:text-gray-200;
			max-width: none;
		}

		.prose h1,
		.prose h2,
		.prose h3,
		.prose h4 {
			@apply scroll-mt-24 relative;
		}

		.prose h1 {
			@apply text-3xl font-bold text-gray-900 dark:text-gray-100 mt-8 mb-6;
		}

		.prose h2 {
			@apply text-2xl font-bold text-gray-900 dark:text-gray-100 mt-8 mb-4 pb-2 border-b border-gray-200 dark:border-gray-700;
		}

		.prose h3 {
			@apply text-xl font-semibold text-gray-900 dark:text-gray-100 mt-6 mb-3;
		}

		.prose h4 {
			@apply text-lg font-medium text-gray-900 dark:text-gray-100 mt-4 mb-2;
		}

		.prose p {
			@apply mb-4 leading-relaxed text-base;
		}

		.prose a {
			@apply text-orange-600 hover:text-orange-700 dark:text-orange-400 dark:hover:text-orange-300 font-medium no-underline transition-colors;
		}

		.prose a:hover {
			@apply underline underline-offset-2;
		}

		.prose code {
			@apply bg-gray-100 dark:bg-gray-800 text-gray-800 dark:text-gray-200 px-1.5 py-0.5 rounded text-sm font-mono before:content-none after:content-none;
		}

		.prose pre {
			@apply bg-gray-900 text-gray-100 p-4 rounded-lg overflow-x-auto my-6 border border-gray-200 dark:border-gray-700;
		}

		.prose pre code {
			@apply bg-transparent text-gray-100 p-0 text-sm;
		}

		.prose blockquote {
			@apply border-l-4 border-orange-500 bg-orange-50 dark:bg-orange-900/20 pl-4 py-2 italic my-6 text-gray-700 dark:text-gray-300;
		}

		.prose ul,
		.prose ol {
			@apply mb-4 pl-6;
		}

		.prose li {
			@apply mb-2 leading-relaxed;
		}

		.prose ul li {
			@apply list-disc;
		}

		.prose ol li {
			@apply list-decimal;
		}

		/* 表格样式 */
		.prose table {
			@apply w-full border-collapse my-6;
		}

		.prose th,
		.prose td {
			@apply border border-gray-300 dark:border-gray-600 px-4 py-2 text-left;
		}

		.prose th {
			@apply bg-gray-100 dark:bg-gray-800 font-semibold;
		}

		/* 图片样式 */
		.prose img {
			@apply rounded-lg shadow-md my-6;
		}
	</style>
</Layout>
