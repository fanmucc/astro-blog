---
// src/pages/[...path].astro - 博客详情页面，专注于内容展示
import { getCollection, type CollectionEntry } from "astro:content";
import Layout from "../layouts/Layout.astro";
import { buildMenuTree, getPageByPath, type PageEntry } from "../utils/menu";

export async function getStaticPaths() {
	// 获取所有发布的页面
	const pages = await getCollection(
		"pages",
		({ data }: { data: PageEntry["data"] }) => {
			return data.published && !data.draft;
		}
	);

	console.log("生成静态路径，总页面数:", pages.length);

	const paths = [];

	for (const page of pages) {
		const pathParts = page.slug.split("/");
		console.log(`处理页面: ${page.slug}, 路径分段:`, pathParts);

		if (pathParts.length === 1) {
			// 单层页面，如 home -> /home
			const path = pathParts[0];
			paths.push({ params: { path }, props: { page } });
			console.log(`添加单层页面路径: /${path}`);
		} else if (pathParts.length === 2 && pathParts[1] === "index") {
			// 主菜单的index页面，如 home/index -> /home
			const path = pathParts[0];
			paths.push({ params: { path }, props: { page } });
			console.log(`添加主菜单index路径: /${path}`);
		} else if (pathParts.length === 2 && pathParts[1] !== "index") {
			// 二层页面，如 react/start -> /react/start
			const path = `${pathParts[0]}/${pathParts[1]}`;
			paths.push({ params: { path }, props: { page } });
			console.log(`添加二层页面路径: /${path}`);
		} else if (pathParts.length === 3 && pathParts[2] === "index") {
			// 子菜单的index页面，如 react/start/index -> /react/start
			const path = `${pathParts[0]}/${pathParts[1]}`;
			paths.push({ params: { path }, props: { page } });
			console.log(`添加子菜单index路径: /${path}`);
		} else if (pathParts.length === 3 && pathParts[2] !== "index") {
			// 具体页面，需要处理 pageName
			const pageName = page.data.pageName || pathParts[2];
			const path = `${pathParts[0]}/${pathParts[1]}/${pageName}`;
			paths.push({ params: { path }, props: { page } });
			console.log(
				`添加页面路径: /${path} (原文件: ${page.slug}, pageName: ${page.data.pageName})`
			);
		}
	}

	console.log(
		"生成的所有路径:",
		paths.map((p) => `/${p.params.path}`)
	);
	return paths;
}

type Props = {
	page: CollectionEntry<"pages">;
};

const { page } = Astro.props;
const { Content } = await page.render();

// 获取当前路径
const currentPath = `/${Astro.params.path}`;

// SEO 数据
const seoTitle = page.data.seoTitle || page.data.title;
const seoDescription = page.data.seoDescription || page.data.description;
---

<Layout
	title={seoTitle}
	description={seoDescription}
	currentPath={currentPath}
	showSidebar={true}
	showHeader={true}
	showBreadcrumb={true}
	theme='auto'
	pageType='article'
>
	<!-- 文章内容 -->
	<article class='blog-article content-area'>
		<header class='article-header'>
			<h1 class='article-title'>{page.data.title}</h1>
			{
				page.data.description && (
					<p class='article-description'>{page.data.description}</p>
				)
			}
			<div class='article-meta'>
				<div class='meta-item'>
					<span class='meta-label'>作者:</span>
					<span class='meta-value'>{page.data.author}</span>
				</div>
				<div class='meta-item'>
					<span class='meta-label'>创建:</span>
					<span class='meta-value'>
						{page.data.createdAt.toLocaleDateString("zh-CN")}
					</span>
				</div>
				{
					page.data.updatedAt && (
						<div class='meta-item'>
							<span class='meta-label'>更新:</span>
							<span class='meta-value'>
								{page.data.updatedAt.toLocaleDateString("zh-CN")}
							</span>
						</div>
					)
				}
				{
					page.data.readingTime && (
						<div class='meta-item'>
							<span class='meta-label'>阅读时间:</span>
							<span class='meta-value'>{page.data.readingTime} 分钟</span>
						</div>
					)
				}
			</div>
		</header>

		<div class='article-content'>
			<Content />
		</div>
	</article>

	<!-- 标签区域 -->
	{
		page.data.tags && page.data.tags.length > 0 && (
			<aside class='article-tags'>
				<h3 class='tags-title'>标签</h3>
				<div class='tags-list'>
					{page.data.tags.map((tag) => (
						<span class='tag-item'>#{tag}</span>
					))}
				</div>
			</aside>
		)
	}

	<!-- 文章导航 -->
	<nav class='article-nav' id='article-nav'>
		<!-- 文章目录将通过脚本动态生成 -->
	</nav>

	<!-- 文章特定脚本 -->
	<script define:vars={{ currentPath }}>
		// 文章页面特定功能
		document.addEventListener("DOMContentLoaded", function () {
			console.log("文章页面加载完成:", currentPath);

			// 初始化文章特定功能
			initArticleFeatures();

			// 生成文章目录
			generateTableOfContents();

			// 高亮当前章节
			highlightCurrentSection();
		});

		// 初始化文章功能
		function initArticleFeatures() {
			// 代码复制功能
			initCodeCopyButtons();

			// 图片点击放大
			initImageLightbox();

			// 外部链接处理
			handleExternalLinks();
		}

		// 代码复制功能
		function initCodeCopyButtons() {
			document.querySelectorAll("pre").forEach((pre) => {
				const code = pre.querySelector("code");
				if (code) {
					const button = document.createElement("button");
					button.innerHTML = `
						<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
						</svg>
					`;
					button.className = "copy-btn";
					button.setAttribute("aria-label", "复制代码");
					button.setAttribute("title", "复制代码");

					pre.style.position = "relative";
					pre.appendChild(button);

					button.addEventListener("click", async () => {
						try {
							await navigator.clipboard.writeText(code.textContent || "");
							button.innerHTML = `
								<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
								</svg>
							`;
							button.classList.add("copied");

							setTimeout(() => {
								button.innerHTML = `
									<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
									</svg>
								`;
								button.classList.remove("copied");
							}, 2000);
						} catch (err) {
							console.error("复制失败:", err);
						}
					});
				}
			});
		}

		// 图片点击放大
		function initImageLightbox() {
			document.querySelectorAll(".article-content img").forEach((img) => {
				img.addEventListener("click", () => {
					// 简单的图片放大显示
					const overlay = document.createElement("div");
					overlay.className = "image-overlay";
					overlay.innerHTML = `
						<div class="overlay-content">
							<img src="${img.src}" alt="${img.alt || ""}" />
							<button class="close-btn">&times;</button>
						</div>
					`;

					document.body.appendChild(overlay);

					// 点击关闭
					overlay.addEventListener("click", (e) => {
						if (
							e.target === overlay ||
							e.target.classList.contains("close-btn")
						) {
							document.body.removeChild(overlay);
						}
					});
				});
			});
		}

		// 外部链接处理
		function handleExternalLinks() {
			document.querySelectorAll('a[href^="http"]').forEach((link) => {
				if (!link.href.startsWith(window.location.origin)) {
					link.setAttribute("target", "_blank");
					link.setAttribute("rel", "noopener noreferrer");

					// 添加外部链接图标
					const icon = document.createElement("span");
					icon.innerHTML = `
						<svg class="w-3 h-3 ml-1 inline-block" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"/>
						</svg>
					`;
					link.appendChild(icon);
				}
			});
		}

		// 生成文章目录
		function generateTableOfContents() {
			const headings = document.querySelectorAll(
				".article-content h1, .article-content h2, .article-content h3, .article-content h4"
			);
			if (headings.length === 0) return;

			const nav = document.getElementById("article-nav");
			if (!nav) return;

			let tocHtml = '<div class="toc-header">目录</div><ul class="toc-list">';

			headings.forEach((heading, index) => {
				const id = `heading-${index}`;
				heading.id = id;

				const level = parseInt(heading.tagName.charAt(1));
				const indent = (level - 1) * 1;

				tocHtml += `
					<li class="toc-item toc-level-${level}" style="margin-left: ${indent}rem;">
						<a href="#${id}" class="toc-link">${heading.textContent}</a>
					</li>
				`;
			});

			tocHtml += "</ul>";
			nav.innerHTML = tocHtml;
		}

		// 高亮当前章节
		function highlightCurrentSection() {
			const headings = document.querySelectorAll(
				".article-content h1, .article-content h2, .article-content h3, .article-content h4"
			);
			const tocLinks = document.querySelectorAll(".toc-link");

			if (headings.length === 0 || tocLinks.length === 0) return;

			const observer = new IntersectionObserver(
				(entries) => {
					entries.forEach((entry) => {
						if (entry.isIntersecting) {
							const id = entry.target.id;
							tocLinks.forEach((link) => {
								link.classList.remove("active");
								if (link.getAttribute("href") === `#${id}`) {
									link.classList.add("active");
								}
							});
						}
					});
				},
				{
					rootMargin: "-20% 0px -60% 0px",
				}
			);

			headings.forEach((heading) => observer.observe(heading));
		}
	</script>

	<style>
		/* 文章样式 */
		.blog-article {
			max-width: none;
		}

		.article-header {
			margin-bottom: 2rem;
			padding-bottom: 1.5rem;
			border-bottom: 1px solid var(--m-content-border);
		}

		.article-title {
			font-size: 2.5rem;
			font-weight: 700;
			color: var(--m-content-heading);
			margin-bottom: 1rem;
			line-height: 1.2;
		}

		.article-description {
			font-size: 1.25rem;
			color: var(--g-text-secondary);
			margin-bottom: 1.5rem;
			line-height: 1.6;
		}

		.article-meta {
			display: flex;
			flex-wrap: wrap;
			gap: 1.5rem;
			font-size: 0.875rem;
		}

		.meta-item {
			display: flex;
			align-items: center;
			gap: 0.5rem;
		}

		.meta-label {
			font-weight: 500;
			color: var(--g-text-tertiary);
		}

		.meta-value {
			color: var(--g-text-secondary);
		}

		/* 文章内容样式 */
		.article-content {
			color: var(--m-content-text);
			line-height: 1.7;
		}

		.article-content h1,
		.article-content h2,
		.article-content h3,
		.article-content h4 {
			color: var(--m-content-heading);
			margin-top: 2rem;
			margin-bottom: 1rem;
			scroll-margin-top: 6rem;
		}

		.article-content h1 {
			font-size: 2rem;
			font-weight: 700;
		}

		.article-content h2 {
			font-size: 1.75rem;
			font-weight: 700;
			padding-bottom: 0.5rem;
			border-bottom: 1px solid var(--m-content-border);
		}

		.article-content h3 {
			font-size: 1.5rem;
			font-weight: 600;
		}

		.article-content h4 {
			font-size: 1.25rem;
			font-weight: 500;
		}

		.article-content p {
			margin-bottom: 1rem;
		}

		.article-content a {
			color: var(--m-content-link);
			text-decoration: none;
			font-weight: 500;
			transition: color var(--transition-fast);
		}

		.article-content a:hover {
			color: var(--m-content-link-hover);
			text-decoration: underline;
			text-underline-offset: 2px;
		}

		.article-content ul,
		.article-content ol {
			margin-bottom: 1rem;
			padding-left: 1.5rem;
		}

		.article-content li {
			margin-bottom: 0.5rem;
		}

		.article-content blockquote {
			border-left: 4px solid var(--color-primary);
			background-color: rgba(251, 146, 60, 0.05);
			padding: 1rem 1.5rem;
			margin: 1.5rem 0;
			font-style: italic;
		}

		.dark .article-content blockquote {
			background-color: rgba(251, 146, 60, 0.1);
		}

		.article-content img {
			max-width: 100%;
			height: auto;
			border-radius: 0.5rem;
			margin: 1.5rem 0;
			cursor: pointer;
			transition: transform var(--transition-fast);
		}

		.article-content img:hover {
			transform: scale(1.02);
		}

		/* 代码样式 */
		.article-content code {
			background-color: var(--code-bg);
			color: var(--code-text);
			padding: 0.125rem 0.375rem;
			border-radius: 0.25rem;
			font-size: 0.875em;
			font-family: "JetBrains Mono", "Fira Code", monospace;
		}

		.article-content pre {
			background-color: var(--code-block-bg);
			color: var(--code-block-text);
			padding: 1rem;
			border-radius: 0.5rem;
			overflow-x: auto;
			margin: 1.5rem 0;
			border: 1px solid var(--code-block-border);
			position: relative;
		}

		.article-content pre code {
			background-color: transparent;
			padding: 0;
			font-size: 0.875rem;
		}

		.copy-btn {
			position: absolute;
			top: 0.75rem;
			right: 0.75rem;
			padding: 0.5rem;
			background-color: var(--g-bg-secondary);
			border: 1px solid var(--g-border);
			border-radius: 0.375rem;
			color: var(--g-text-secondary);
			cursor: pointer;
			transition: all var(--transition-fast);
			opacity: 0.7;
		}

		.copy-btn:hover {
			opacity: 1;
			background-color: var(--g-bg-tertiary);
			color: var(--g-text-primary);
		}

		.copy-btn.copied {
			color: var(--color-success);
		}

		/* 标签样式 */
		.article-tags {
			margin-top: 2rem;
			padding-top: 2rem;
			border-top: 1px solid var(--m-content-border);
		}

		.tags-title {
			font-size: 1.125rem;
			font-weight: 600;
			color: var(--m-content-heading);
			margin-bottom: 1rem;
		}

		.tags-list {
			display: flex;
			flex-wrap: wrap;
			gap: 0.5rem;
		}

		.tag-item {
			padding: 0.25rem 0.75rem;
			font-size: 0.875rem;
			font-weight: 500;
			background-color: var(--g-bg-tertiary);
			color: var(--g-text-secondary);
			border-radius: 9999px;
			transition: all var(--transition-fast);
		}

		.tag-item:hover {
			background-color: var(--color-primary);
			color: white;
		}

		/* 文章目录 */
		.article-nav {
			position: fixed;
			right: 2rem;
			top: 50%;
			transform: translateY(-50%);
			width: 200px;
			max-height: 60vh;
			background-color: var(--g-bg-secondary);
			border: 1px solid var(--g-border);
			border-radius: 0.5rem;
			padding: 1rem;
			overflow-y: auto;
			z-index: 10;
		}

		.toc-header {
			font-weight: 600;
			color: var(--m-content-heading);
			margin-bottom: 0.75rem;
			font-size: 0.875rem;
		}

		.toc-list {
			list-style: none;
			padding: 0;
			margin: 0;
		}

		.toc-item {
			margin-bottom: 0.25rem;
		}

		.toc-link {
			display: block;
			padding: 0.25rem 0;
			font-size: 0.75rem;
			color: var(--g-text-secondary);
			text-decoration: none;
			line-height: 1.4;
			transition: color var(--transition-fast);
		}

		.toc-link:hover,
		.toc-link.active {
			color: var(--color-primary);
		}

		/* 图片覆盖层 */
		.image-overlay {
			position: fixed;
			top: 0;
			left: 0;
			right: 0;
			bottom: 0;
			background-color: rgba(0, 0, 0, 0.8);
			display: flex;
			align-items: center;
			justify-content: center;
			z-index: 100;
		}

		.overlay-content {
			position: relative;
			max-width: 90vw;
			max-height: 90vh;
		}

		.overlay-content img {
			max-width: 100%;
			max-height: 100%;
			object-fit: contain;
		}

		.close-btn {
			position: absolute;
			top: -2rem;
			right: 0;
			font-size: 2rem;
			color: white;
			background: none;
			border: none;
			cursor: pointer;
		}

		/* 响应式设计 */
		@media (max-width: 1280px) {
			.article-nav {
				display: none;
			}
		}

		@media (max-width: 768px) {
			.article-title {
				font-size: 2rem;
			}

			.article-description {
				font-size: 1.125rem;
			}

			.article-meta {
				flex-direction: column;
				gap: 0.75rem;
			}

			.article-content h1 {
				font-size: 1.75rem;
			}

			.article-content h2 {
				font-size: 1.5rem;
			}

			.article-content h3 {
				font-size: 1.25rem;
			}

			.copy-btn {
				top: 0.5rem;
				right: 0.5rem;
				padding: 0.375rem;
			}
		}
	</style>
</Layout>
