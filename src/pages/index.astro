---
import Layout from "../layouts/Layout.astro";
import { buildMenuTree, getPageByPath } from "../utils/menu";
import {
	getRedirectConfig,
	shouldRedirect,
	clientRedirect,
} from "../utils/redirects.ts";
import Icon from "../components/Icon.astro";

// 获取重定向配置
const redirectConfig = await getRedirectConfig();

// 检查当前路径是否需要重定向
const currentPath = Astro.url.pathname;
const redirectRule = shouldRedirect(currentPath, redirectConfig);

// 如果需要重定向，执行服务端重定向
if (redirectRule && currentPath === "/") {
	console.log(`服务端重定向: ${currentPath} -> ${redirectRule.to}`);
	return Astro.redirect(redirectRule.to, redirectRule.status || 302);
}

// 构建菜单树
const menuTree = await buildMenuTree();

// 默认显示首页内容
const defaultPage = await getPageByPath("home/index");
const { Content: DefaultContent } = defaultPage
	? await defaultPage.render()
	: { Content: null };
---

<Layout
	title='Fanmu - yancode.life'
	description='分享技术见解、生活感悟和学习心得'
>
	<!-- 客户端重定向脚本 -->
	<script define:vars={{ redirectConfig, currentPath }}>
		// 客户端重定向检查（用于动态路由和特殊情况）
		function checkClientRedirect() {
			const pathname = window.location.pathname;
			console.log("检查客户端重定向:", pathname);

			// 检查是否需要重定向
			const rule = redirectConfig.rules.find((r) => r.from === pathname);
			if (rule) {
				console.log(`客户端重定向: ${pathname} -> ${rule.to}`);

				// 根据重定向类型选择方法
				if (rule.type === "permanent") {
					window.location.replace(rule.to);
				} else {
					window.location.href = rule.to;
				}
				return true;
			}

			// 检查外部重定向
			const externalRule = redirectConfig.external.find(
				(r) => r.from === pathname
			);
			if (externalRule) {
				console.log(`外部重定向: ${pathname} -> ${externalRule.to}`);
				window.open(externalRule.to, "_blank", "noopener,noreferrer");
				return true;
			}

			return false;
		}

		// 页面加载时检查重定向
		if (typeof window !== "undefined") {
			// 立即检查重定向
			if (checkClientRedirect()) {
				// 如果发生了重定向，停止后续脚本执行
				throw new Error("Redirected");
			}

			// 监听 popstate 事件，处理浏览器前进后退
			window.addEventListener("popstate", function () {
				setTimeout(checkClientRedirect, 100);
			});
		}
	</script>

	<div class='h-screen bg-white dark:bg-gray-900 m-0 overflow-hidden'>
		<!-- 顶部导航 -->
		<header
			class='sticky top-0 z-50 w-full border-b border-gray-200 bg-white/80 backdrop-blur-md dark:border-gray-800 dark:bg-gray-900/80'
		>
			<div class='px-4 lg:px-6'>
				<div class='flex h-16 items-center justify-between'>
					<!-- Logo -->
					<div class='flex items-center space-x-3'>
						<a href='/' class='flex items-center space-x-3 group'>
							<div
								class='flex h-10 w-10 items-center justify-center rounded-lg shadow-sm group-hover:shadow-md transition-all duration-200'
							>
								<svg viewBox='0 0 120 120' class='h-10 w-10'>
									<defs>
										<linearGradient
											id='primaryGradient'
											x1='0%'
											y1='0%'
											x2='100%'
											y2='100%'
										>
											<stop
												offset='0%'
												style='stop-color:#f59e0b;stop-opacity:1'></stop>
											<stop
												offset='100%'
												style='stop-color:#d97706;stop-opacity:1'></stop>
										</linearGradient>
										<filter
											id='shadow'
											x='-20%'
											y='-20%'
											width='140%'
											height='140%'
										>
											<feDropShadow
												dx='1'
												dy='2'
												stdDeviation='2'
												flood-opacity='0.2'
												flood-color='#000'></feDropShadow>
										</filter>
									</defs>
									<circle
										cx='60'
										cy='60'
										r='56'
										fill='url(#primaryGradient)'
										filter='url(#shadow)'></circle>
									<g transform='translate(60, 60)'>
										<path
											d='M -20 -15 Q -25 -15 -25 -10 L -25 -5 Q -25 0 -30 0 Q -25 0 -25 5 L -25 10 Q -25 15 -20 15'
											stroke='white'
											stroke-width='3'
											fill='none'
											stroke-linecap='round'></path>
										<path
											d='M 20 -15 Q 25 -15 25 -10 L 25 -5 Q 25 0 30 0 Q 25 0 25 5 L 25 10 Q 25 15 20 15'
											stroke='white'
											stroke-width='3'
											fill='none'
											stroke-linecap='round'></path>
										<circle cx='-8' cy='-3' r='2' fill='white'></circle>
										<circle cx='0' cy='3' r='2' fill='white'></circle>
										<circle cx='8' cy='-3' r='2' fill='white'></circle>
									</g>
									<g opacity='0.3'>
										<polygon points='15,25 25,15 35,25' fill='white'></polygon>
										<polygon points='85,85 95,90 85,95 75,90' fill='white'
										></polygon>
									</g>
								</svg>
							</div>
							<div class='flex flex-col'>
								<span
									class='text-xl font-bold text-gray-900 dark:text-gray-100 group-hover:text-orange-600 dark:group-hover:text-orange-400 transition-colors duration-200 leading-tight'
								>
									Fanmu
								</span>
								<span
									class='text-xs text-gray-500 dark:text-gray-400 font-medium leading-none'
								>
									yancode.life
								</span>
							</div>
						</a>
					</div>

					<!-- 右侧：搜索 + 主题切换 + 快捷链接 -->
					<div class='flex items-center space-x-3'>
						<!-- 快捷外部链接 -->
						<div class='hidden md:flex items-center space-x-2'>
							<button
								onclick="window.open('/github', '_blank')"
								class='p-2 text-gray-500 hover:text-gray-700 transition-colors duration-200 dark:text-gray-400 dark:hover:text-gray-200 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 focus:outline-none focus:ring-0 border-none'
								title='GitHub'
							>
								<svg class='h-5 w-5' fill='currentColor' viewBox='0 0 24 24'>
									<path
										d='M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z'
									></path>
								</svg>
							</button>
						</div>

						<!-- 搜索框 -->
						<div class='relative group'>
							<div class='relative'>
								<input
									type='search'
									placeholder='搜索'
									id='global-search'
									class='w-64 pl-10 pr-4 py-2.5 text-sm bg-gray-50 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all duration-200 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-100 dark:placeholder-gray-400 dark:focus:ring-orange-600'
								/>
								<div
									class='absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none'
								>
									<svg
										class='h-4 w-4 text-gray-400 dark:text-gray-500'
										fill='none'
										stroke='currentColor'
										viewBox='0 0 24 24'
									>
										<path
											stroke-linecap='round'
											stroke-linejoin='round'
											stroke-width='2'
											d='M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z'></path>
									</svg>
								</div>
								<div class='absolute inset-y-0 right-0 pr-3 flex items-center'>
									<kbd
										class='hidden sm:inline-flex h-5 select-none items-center gap-1 rounded border border-gray-200 bg-gray-100 px-1.5 font-mono text-xs text-gray-600 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-400'
									>
										<span class='text-xs'>⌘</span>K
									</kbd>
								</div>
							</div>
						</div>

						<!-- 主题切换按钮 -->
						<button
							id='theme-toggle'
							class='p-2 text-gray-500 hover:text-gray-700 transition-colors duration-200 dark:text-gray-400 dark:hover:text-gray-200 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 focus:outline-none focus:ring-0 border-none'
							aria-label='切换主题'
						>
							<svg
								class='h-5 w-5 hidden dark:block'
								fill='none'
								stroke='currentColor'
								viewBox='0 0 24 24'
								stroke-width='1.5'
							>
								<path
									stroke-linecap='round'
									stroke-linejoin='round'
									d='M12 3v2.25m6.364.386l-1.591 1.591M21 12h-2.25m-.386 6.364l-1.591-1.591M12 18.75V21m-4.773-4.227l-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0z'
								></path>
							</svg>
							<svg
								class='h-5 w-5 block dark:hidden'
								fill='none'
								stroke='currentColor'
								viewBox='0 0 24 24'
								stroke-width='1.5'
							>
								<path
									stroke-linecap='round'
									stroke-linejoin='round'
									d='M21.752 15.002A9.718 9.718 0 0118 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 003 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 009.002-5.998z'
								></path>
							</svg>
						</button>
					</div>
				</div>
			</div>
		</header>

		<!-- 主要内容区域 -->
		<div class='flex' style='height: calc(100vh - 4rem);'>
			<!-- 左侧边栏 -->
			<aside
				class='w-64 flex-shrink-0 border-r border-gray-200 bg-white dark:border-gray-800 dark:bg-gray-900 flex flex-col h-full'
			>
				<div class='flex-1 overflow-y-auto px-2 py-4 sidebar-scroll'>
					<!-- 主菜单 -->
					<div class='mb-6 bg-gray-50 dark:bg-gray-800 rounded-lg p-2'>
						<nav class='space-y-1' id='main-menu'>
							{
								menuTree.map((menuItem) => (
									<button
										data-menu={menuItem.value}
										data-path={menuItem.path}
										data-has-index={menuItem.hasIndex}
										class='menu-item group flex items-center w-full px-3 py-2.5 text-sm font-medium rounded-lg text-gray-700 hover:bg-gray-100 hover:text-gray-900 dark:text-gray-300 dark:hover:bg-gray-700 dark:hover:text-gray-100 transition-colors duration-200 text-left focus:outline-none focus:ring-0 border-none'
									>
										{menuItem.icon && (
											<span class='mr-3 h-5 w-5 text-orange-500 flex items-center justify-center'>
												<Icon name={menuItem.icon as any} />
											</span>
										)}
										<span class='flex-1'>{menuItem.label}</span>
									</button>
								))
							}
						</nav>
					</div>

					<!-- 子菜单区域 -->
					<div class='border-gray-200 dark:border-gray-700 px-2 pt-4'>
						<div
							class='text-sm text-gray-500 dark:text-gray-400 px-3 mb-3'
							id='submenu-title'
						>
							子菜单
						</div>

						<!-- 动态子菜单内容 -->
						<div id='submenu-container' class='space-y-1'>
							<div class='text-xs text-gray-400 dark:text-gray-500 px-3 py-2'>
								选择上方菜单查看子选项
							</div>
						</div>
					</div>
				</div>
			</aside>

			<!-- 主内容区 -->
			<main class='flex-1 overflow-y-auto h-full main-content'>
				<div class='px-6 py-6 lg:px-8'>
					<!-- 面包屑导航 -->
					<nav class='mb-6' id='breadcrumb-nav' style='display: none;'>
						<ol
							class='flex items-center space-x-2 text-sm text-gray-500 dark:text-gray-400'
						>
							<!-- 面包屑将通过 JavaScript 动态生成 -->
						</ol>
					</nav>

					<!-- 内容区域 -->
					<div id='content-area'>
						{
							defaultPage && DefaultContent ? (
								<article class='prose prose-lg max-w-none prose-gray dark:prose-invert'>
									<header class='mb-8'>
										<h1 class='text-4xl font-bold text-gray-900 dark:text-gray-100 mb-4'>
											{defaultPage.data.title}
										</h1>
										{defaultPage.data.description && (
											<p class='text-xl text-gray-600 dark:text-gray-400 mb-6'>
												{defaultPage.data.description}
											</p>
										)}
										<div class='flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400 border-b border-gray-200 dark:border-gray-800 pb-4'>
											<span>作者: {defaultPage.data.author}</span>
											<span>
												创建于:{" "}
												{defaultPage.data.createdAt.toLocaleDateString("zh-CN")}
											</span>
											{defaultPage.data.readingTime && (
												<span>
													阅读时间: {defaultPage.data.readingTime} 分钟
												</span>
											)}
										</div>
									</header>
									<DefaultContent />
								</article>
							) : (
								<div class='text-center py-12'>
									<svg
										class='w-16 h-16 mx-auto text-gray-400 mb-4'
										fill='none'
										stroke='currentColor'
										viewBox='0 0 24 24'
									>
										<path
											stroke-linecap='round'
											stroke-linejoin='round'
											stroke-width='2'
											d='M9 12h6M9 16h6M9 8h6M3 8V6a2 2 0 012-2h14a2 2 0 012 2v2M3 8v10a2 2 0 002 2h14a2 2 0 002 2V8'
										/>
									</svg>
									<h2 class='text-2xl font-bold text-gray-900 dark:text-gray-100 mb-4'>
										欢迎来到 Fanmu 的博客
									</h2>
									<p class='text-lg text-gray-600 dark:text-gray-400 mb-6'>
										请选择左侧菜单开始浏览内容
									</p>
								</div>
							)
						}
					</div>
				</div>
			</main>
		</div>
	</div>

	<!-- 页面脚本 -->
	<script define:vars={{ menuTree, redirectConfig }}>
		// 全局变量
		window.menuTree = menuTree;
		window.redirectConfig = redirectConfig;
		let currentMenu = "home";
		let currentSubmenu = null;
		let selectedMenuItem = null;
		let expandedSections = new Set();

		// 主题切换功能
		const themeToggle = document.getElementById("theme-toggle");

		function toggleTheme() {
			const html = document.documentElement;
			const isDark = html.classList.contains("dark");

			if (isDark) {
				html.classList.remove("dark");
				localStorage.setItem("theme", "light");
			} else {
				html.classList.add("dark");
				localStorage.setItem("theme", "dark");
			}
		}

		function initTheme() {
			const savedTheme = localStorage.getItem("theme");
			const prefersDark = window.matchMedia(
				"(prefers-color-scheme: dark)"
			).matches;

			if (savedTheme === "dark" || (!savedTheme && prefersDark)) {
				document.documentElement.classList.add("dark");
			}
		}

		// 重定向处理函数
		function handleRedirect(pathname) {
			// 检查内部重定向
			const internalRedirect = redirectConfig.rules.find(
				(rule) => rule.from === pathname
			);
			if (internalRedirect) {
				console.log(`重定向: ${pathname} -> ${internalRedirect.to}`);
				if (internalRedirect.type === "permanent") {
					window.location.replace(internalRedirect.to);
				} else {
					window.location.href = internalRedirect.to;
				}
				return true;
			}

			// 检查外部重定向
			const externalRedirect = redirectConfig.external.find(
				(rule) => rule.from === pathname
			);
			if (externalRedirect) {
				console.log(`外部重定向: ${pathname} -> ${externalRedirect.to}`);
				window.open(externalRedirect.to, "_blank", "noopener,noreferrer");
				return true;
			}

			return false;
		}

		// 渲染面包屑导航
		function renderBreadcrumb(path) {
			const breadcrumbNav = document.getElementById("breadcrumb-nav");
			const breadcrumbContainer = breadcrumbNav.querySelector("ol");

			const pathParts = path.split("/").filter((part) => part);

			if (pathParts.length === 0) {
				breadcrumbNav.style.display = "none";
				return;
			}

			let breadcrumbHtml =
				'<li><a href="/" class="hover:text-gray-700 dark:hover:text-gray-300 cursor-pointer" onclick="navigateToHome()">首页</a></li>';

			let currentPath = "";
			pathParts.forEach((part, index) => {
				currentPath += "/" + part;
				const isLast = index === pathParts.length - 1;

				const menuItem = findMenuItemByPath(window.menuTree, currentPath);
				const label = menuItem ? menuItem.label : part.replace(/-/g, " ");

				breadcrumbHtml += `
          <li class="flex items-center">
            <svg class="h-4 w-4 mx-2" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
            </svg>
            ${
							isLast
								? `<span class="text-gray-900 dark:text-gray-100">${label}</span>`
								: `<a href="javascript:void(0)" onclick="loadPageContent('${currentPath}')" class="hover:text-gray-700 dark:hover:text-gray-300 cursor-pointer">${label}</a>`
						}
          </li>
        `;
			});

			breadcrumbContainer.innerHTML = breadcrumbHtml;
			breadcrumbNav.style.display = "block";
		}

		// 导航到首页
		function navigateToHome() {
			selectMainMenu("home");
		}

		// 查找菜单项
		function findMenuItemByPath(menuTree, targetPath) {
			function searchMenu(items) {
				for (const item of items) {
					if (item.path === targetPath) {
						return item;
					}
					if (item.children && item.children.length > 0) {
						const found = searchMenu(item.children);
						if (found) return found;
					}
				}
				return null;
			}
			return searchMenu(menuTree);
		}

		// 简单的 Markdown 转 HTML
		function simpleMarkdownToHtml(markdown) {
			if (!markdown) return "";

			return markdown
				.replace(/^### (.*$)/gim, "<h3>$1</h3>")
				.replace(/^## (.*$)/gim, "<h2>$1</h2>")
				.replace(/^# (.*$)/gim, "<h1>$1</h1>")
				.replace(/\*\*(.*?)\*\*/gim, "<strong>$1</strong>")
				.replace(/\*(.*?)\*/gim, "<em>$1</em>")
				.replace(/`(.*?)`/gim, "<code>$1</code>")
				.replace(/\n\n/gim, "</p><p>")
				.replace(/\n/gim, "<br>")
				.replace(/^(.+)$/gim, "<p>$1</p>")
				.replace(/<p><\/p>/gim, "")
				.replace(/<p>(<h[1-6]>.*<\/h[1-6]>)<\/p>/gim, "$1");
		}

		// 更新 URL
		function updateURL(path) {
			const newUrl = window.location.origin + path;
			window.history.pushState({ path: path }, "", newUrl);
		}

		// 加载页面内容
		async function loadPageContent(path) {
			try {
				console.log("加载页面:", path);

				// 先检查是否需要重定向
				if (handleRedirect(path)) {
					return;
				}

				if (!path || path === "") {
					throw new Error("路径参数为空");
				}

				const cleanPath = path.startsWith("/") ? path : "/" + path;
				const apiUrl = `/api/page?path=${encodeURIComponent(cleanPath)}`;

				const response = await fetch(apiUrl);

				if (!response.ok) {
					const errorData = await response.json();
					console.error("API 错误:", errorData);
					throw new Error(errorData.error || "页面不存在");
				}

				const data = await response.json();
				console.log("获取到数据:", data);

				const contentArea = document.getElementById("content-area");
				const htmlContent = simpleMarkdownToHtml(data.body || "");

				contentArea.innerHTML = `
					<article class="prose prose-lg max-w-none prose-gray dark:prose-invert">
						<header class="mb-8">
							<h1 class="text-4xl font-bold text-gray-900 dark:text-gray-100 mb-4">
								${data.title}
							</h1>
							${
								data.description
									? `
								<p class="text-xl text-gray-600 dark:text-gray-400 mb-6">
									${data.description}
								</p>
							`
									: ""
							}
							<div class="flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400 border-b border-gray-200 dark:border-gray-800 pb-4">
								<span>作者: ${data.author}</span>
								<span>创建于: ${new Date(data.createdAt).toLocaleDateString("zh-CN")}</span>
								${data.readingTime ? `<span>阅读时间: ${data.readingTime} 分钟</span>` : ""}
							</div>
						</header>
						<div class="content">${htmlContent}</div>
					</article>
				`;

				updateURL(path);
				renderBreadcrumb(path);
				document
					.querySelector(".main-content")
					.scrollTo({ top: 0, behavior: "smooth" });
			} catch (error) {
				console.error("加载页面失败:", error);
				const contentArea = document.getElementById("content-area");
				contentArea.innerHTML = `
					<div class="text-center py-12">
						<svg class="w-16 h-16 mx-auto text-red-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
						</svg>
						<h2 class="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-4">
							页面加载失败
						</h2>
						<p class="text-lg text-gray-600 dark:text-gray-400 mb-4">
							${error.message}
						</p>
						<div class="flex justify-center space-x-4">
							<button onclick="location.reload()" class="px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 focus:outline-none focus:ring-0 border-none">
								刷新页面
							</button>
							<button onclick="navigateToHome()" class="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 focus:outline-none focus:ring-0 border-none">
								返回首页
							</button>
						</div>
					</div>
				`;
			}
		}

		// 渲染子菜单
		function renderSubmenu(menuKey) {
			console.log("渲染子菜单:", menuKey);

			const container = document.getElementById("submenu-container");
			const titleElement = document.getElementById("submenu-title");
			const menuItem = window.menuTree.find((item) => item.value === menuKey);

			if (!menuItem || !menuItem.children || menuItem.children.length === 0) {
				container.innerHTML =
					'<div class="text-xs text-gray-400 dark:text-gray-500 px-3 py-2">暂无子菜单</div>';
				titleElement.textContent = "子菜单";
				return;
			}

			titleElement.textContent = `${menuItem.label} - 子菜单`;

			const submenuHtml = menuItem.children
				.map((section) => {
					const isExpanded = expandedSections.has(section.value);

					if (section.children && section.children.length > 0) {
						const childrenHtml = isExpanded
							? section.children
									.map(
										(child) => `
										<div class="submenu-item ${selectedMenuItem === child.value ? "active" : ""}" data-submenu="${child.value}" data-path="${child.path}">
											<a href="javascript:void(0)" class="flex items-center py-3 text-sm group cursor-pointer focus:outline-none focus:ring-0 border-none">
												<div class="submenu-vertical-line w-px h-full bg-gray-300 dark:bg-gray-600 transition-all duration-200 ${selectedMenuItem === child.value ? "bg-orange-500 dark:bg-orange-400" : "group-hover:bg-orange-400 dark:group-hover:bg-orange-500"}"></div>
												<span class="text-gray-700 dark:text-gray-300 group-hover:text-gray-900 dark:group-hover:text-gray-100 ml-9 ${selectedMenuItem === child.value ? "text-orange-700 dark:text-orange-300 font-medium" : ""}">
													${child.label}
												</span>
											</a>
										</div>
									`
									)
									.join("")
							: "";

						return `
							<div class="submenu-section mb-2 relative">
								<div class="section-header flex items-center py-3 cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-800 rounded-md transition-colors duration-200 focus:outline-none focus:ring-0 border-none" data-section="${section.value}" data-path="${section.path}" data-has-index="${section.hasIndex}">
									<span class="expand-arrow text-gray-500 dark:text-gray-400 transition-transform duration-200 w-6 h-6 flex items-center justify-center ${isExpanded ? "rotate-90" : ""}">
										<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
											<path d="m9 18 6-6-6-6"/>
										</svg>
									</span>
									<span class="text-sm font-medium text-gray-900 dark:text-gray-100 ml-3">${section.label}</span>
								</div>
								<div class="section-children relative ${isExpanded ? "block" : "hidden"}">
									<div class="absolute left-3 top-0 bottom-0 w-px bg-gray-200 dark:bg-gray-700"></div>
									${childrenHtml}
								</div>
							</div>
						`;
					} else {
						return `
							<div class="submenu-item ${selectedMenuItem === section.value ? "active" : ""}" data-submenu="${section.value}" data-path="${section.path}">
								<a href="javascript:void(0)" class="flex items-center py-3 text-sm rounded-lg transition-colors duration-200 group focus:outline-none focus:ring-0 border-none">
									<span class="text-gray-700 dark:text-gray-300 group-hover:text-gray-900 dark:group-hover:text-gray-100 ${selectedMenuItem === section.value ? "text-orange-700 dark:text-orange-300 font-medium" : ""}">
										${section.label}
									</span>
								</a>
							</div>
						`;
					}
				})
				.join("");

			container.innerHTML = submenuHtml;

			// 绑定分组点击事件
			container.querySelectorAll(".section-header").forEach((header) => {
				header.addEventListener("click", (e) => {
					e.preventDefault();
					const sectionId = header.dataset.section;
					const hasIndex = header.dataset.hasIndex === "true";
					const path = header.dataset.path;

					if (hasIndex && path) {
						loadPageContent(path);
						selectSubmenu(sectionId);
					}

					toggleSection(sectionId);
				});
			});

			// 绑定子菜单点击事件
			container.querySelectorAll(".submenu-item").forEach((item) => {
				item.addEventListener("click", (e) => {
					e.preventDefault();
					const submenuId = item.dataset.submenu;
					const path = item.dataset.path;

					if (path) {
						selectSubmenu(submenuId);
						loadPageContent(path);
					}
				});
			});
		}

		// 切换分组展开状态
		function toggleSection(sectionId) {
			if (expandedSections.has(sectionId)) {
				expandedSections.delete(sectionId);
			} else {
				expandedSections.add(sectionId);
			}
			renderSubmenu(currentMenu);
		}

		// 选择子菜单
		function selectSubmenu(submenuId) {
			selectedMenuItem = submenuId;

			document.querySelectorAll(".submenu-item").forEach((item) => {
				item.classList.remove("active");
			});

			const selectedItem = document.querySelector(
				`[data-submenu="${submenuId}"]`
			);
			if (selectedItem) {
				selectedItem.classList.add("active");
			}
		}

		// 选择主菜单
		function selectMainMenu(menuKey) {
			console.log("选择主菜单:", menuKey);

			currentMenu = menuKey;
			selectedMenuItem = null;
			expandedSections.clear();

			document.querySelectorAll(".menu-item").forEach((item) => {
				item.classList.remove("active");
			});

			const selectedMenuElement = document.querySelector(
				`[data-menu="${menuKey}"]`
			);
			if (selectedMenuElement) {
				selectedMenuElement.classList.add("active");
			}

			const menuItem = window.menuTree.find((item) => item.value === menuKey);

			if (menuItem) {
				if (menuItem.hasIndex) {
					loadPageContent(menuItem.path);
				} else {
					const contentArea = document.getElementById("content-area");
					contentArea.innerHTML = `
						<div class="text-center py-12">
							<svg class="w-16 h-16 mx-auto text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6M9 16h6M9 8h6M3 8V6a2 2 0 012-2h14a2 2 0 012 2v2M3 8v10a2 2 0 002 2h14a2 2 0 002 2V8" />
							</svg>
							<h2 class="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-4">
								${menuItem.label}
							</h2>
							<p class="text-lg text-gray-600 dark:text-gray-400 mb-6">
								请从左侧子菜单中选择具体内容
							</p>
						</div>
					`;
				}

				renderSubmenu(menuKey);
			}
		}

		// 初始化菜单
		function initMenus() {
			document.querySelectorAll(".menu-item").forEach((item) => {
				item.addEventListener("click", (e) => {
					e.preventDefault();
					const menuKey = item.dataset.menu;
					selectMainMenu(menuKey);
				});
			});

			selectMainMenu("home");
		}

		// 搜索功能
		const searchInput = document.getElementById("global-search");

		document.addEventListener("keydown", (e) => {
			if ((e.metaKey || e.ctrlKey) && e.key === "k") {
				e.preventDefault();
				searchInput?.focus();
			}

			if (e.key === "Escape") {
				searchInput?.blur();
			}
		});

		let searchTimeout;
		searchInput?.addEventListener("input", (e) => {
			clearTimeout(searchTimeout);
			const query = e.target.value.trim();

			searchTimeout = setTimeout(() => {
				if (query.length > 0) {
					performSearch(query);
				} else {
					resetSearch();
				}
			}, 300);
		});

		async function performSearch(query) {
			try {
				const response = await fetch(
					`/api/search?q=${encodeURIComponent(query)}`
				);
				const results = await response.json();
				showSearchResults(results, query);
			} catch (error) {
				console.error("搜索出错:", error);
			}
		}

		function showSearchResults(results, query) {
			const contentArea = document.getElementById("content-area");

			const resultsHtml = `
				<div class="search-results">
					<header class="mb-8">
						<h1 class="text-3xl font-bold text-gray-900 dark:text-gray-100 mb-4">
							搜索结果
						</h1>
						<p class="text-lg text-gray-600 dark:text-gray-400">
							找到 ${results.length} 个关于 "${query}" 的结果
						</p>
					</header>
					
					${
						results.length > 0
							? `
						<div class="space-y-6">
							${results
								.map(
									(result) => `
								<article class="border border-gray-200 dark:border-gray-700 rounded-lg p-6 hover:shadow-md transition-shadow cursor-pointer focus:outline-none focus:ring-0 border-none" onclick="loadPageContent('${result.path}')">
									<h2 class="text-xl font-semibold text-gray-900 dark:text-gray-100 mb-2 hover:text-orange-600 dark:hover:text-orange-400">
										${result.title}
									</h2>
									${
										result.description
											? `
										<p class="text-gray-600 dark:text-gray-400 mb-3">
											${result.description}
										</p>
									`
											: ""
									}
									<div class="flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400">
										<span>路径: ${result.path}</span>
										<span>作者: ${result.author}</span>
									</div>
								</article>
							`
								)
								.join("")}
						</div>
					`
							: `
						<div class="text-center py-12">
							<svg class="w-16 h-16 mx-auto text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
							</svg>
							<h2 class="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-4">
								未找到相关内容
							</h2>
							<p class="text-lg text-gray-600 dark:text-gray-400">
								请尝试其他关键词
							</p>
						</div>
					`
					}
				</div>
			`;

			contentArea.innerHTML = resultsHtml;
			document.getElementById("breadcrumb-nav").style.display = "none";
		}

		function resetSearch() {
			selectMainMenu(currentMenu);
		}

		// 处理浏览器前进后退
		window.addEventListener("popstate", function (event) {
			if (event.state && event.state.path) {
				loadPageContent(event.state.path);
			} else {
				selectMainMenu("home");
			}
		});

		// 初始化
		document.addEventListener("DOMContentLoaded", function () {
			console.log("页面加载完成，当前路径:", window.location.pathname);

			initTheme();
			themeToggle?.addEventListener("click", toggleTheme);
			initMenus();

			// 检查 URL 并加载对应页面
			if (window.location.pathname !== "/") {
				const currentPath = window.location.pathname;

				// 先检查是否需要重定向
				if (!handleRedirect(currentPath)) {
					const menuItem = findMenuItemByPath(window.menuTree, currentPath);

					if (menuItem) {
						const mainMenuKey = currentPath.split("/")[1];
						if (mainMenuKey) {
							selectMainMenu(mainMenuKey);
							if (currentPath !== `/${mainMenuKey}`) {
								loadPageContent(currentPath);
							}
						}
					}
				}
			}
		});
	</script>

	<style>
		/* 导入全局样式 */
		@import "../styles/global.css";

		/* 移除所有按钮的默认边框和焦点样式 */
		button:focus,
		button:active,
		button:hover,
		input:focus,
		input:active,
		a:focus,
		a:active {
			outline: none !important;
			border: none !important;
			box-shadow: none !important;
		}

		/* 菜单样式优化 */
		.menu-item {
			@apply transition-all duration-200;
			border: none !important;
			outline: none !important;
		}

		.menu-item.active {
			@apply bg-white text-gray-900 shadow-sm;
			@apply dark:bg-gray-700 dark:text-gray-100;
		}

		.menu-item.active svg {
			@apply text-orange-600;
			@apply dark:text-orange-400;
		}

		.menu-item:not(.active):hover {
			@apply bg-gray-100 text-gray-900;
			@apply dark:bg-gray-700 dark:text-gray-100;
		}

		/* 子菜单样式 */
		.submenu-item {
			@apply transition-all duration-200 relative;
		}

		.submenu-item.active a {
			@apply text-orange-700 dark:text-orange-300 font-medium;
		}

		.submenu-item:hover:not(.active) a {
			@apply text-gray-900 dark:text-gray-100;
		}

		/* 分组标题样式 */
		.section-header {
			@apply transition-all duration-200;
			border: none !important;
			outline: none !important;
		}

		.section-header:hover {
			@apply bg-gray-50 dark:bg-gray-800;
		}

		/* 展开箭头动画 */
		.expand-arrow {
			@apply transition-transform duration-200 ease-in-out;
		}

		.expand-arrow.rotate-90 {
			transform: rotate(90deg);
		}

		/* 分组内容显示/隐藏动画 */
		.section-children {
			@apply transition-all duration-300 ease-in-out;
		}

		.section-children.hidden {
			@apply opacity-0;
			max-height: 0;
			overflow: hidden;
		}

		.section-children.block {
			@apply opacity-100;
			max-height: none;
		}

		/* 子菜单竖线样式 */
		.submenu-vertical-line {
			@apply transition-all duration-200 ease-in-out relative z-10;
			transform-origin: center;
		}

		.submenu-item:hover .submenu-vertical-line {
			@apply bg-orange-400 dark:bg-orange-500;
			transform: scaleX(2);
		}

		.submenu-item.active .submenu-vertical-line {
			@apply bg-orange-500 dark:bg-orange-400;
			transform: scaleX(3);
			filter: drop-shadow(0 0 3px rgba(251, 146, 60, 0.6));
		}

		/* 增强的 prose 样式 */
		.prose {
			@apply text-gray-800 dark:text-gray-200;
			max-width: none;
		}

		.prose h1,
		.prose h2,
		.prose h3,
		.prose h4 {
			@apply scroll-mt-24 relative;
		}

		.prose h1 {
			@apply text-3xl font-bold text-gray-900 dark:text-gray-100 mt-8 mb-6;
		}

		.prose h2 {
			@apply text-2xl font-bold text-gray-900 dark:text-gray-100 mt-8 mb-4 pb-2 border-b border-gray-200 dark:border-gray-700;
		}

		.prose h3 {
			@apply text-xl font-semibold text-gray-900 dark:text-gray-100 mt-6 mb-3;
		}

		.prose h4 {
			@apply text-lg font-medium text-gray-900 dark:text-gray-100 mt-4 mb-2;
		}

		.prose p {
			@apply mb-4 leading-relaxed text-base;
		}

		.prose a {
			@apply text-orange-600 hover:text-orange-700 dark:text-orange-400 dark:hover:text-orange-300 font-medium no-underline transition-colors;
		}

		.prose a:hover {
			@apply underline underline-offset-2;
		}

		.prose code {
			@apply bg-gray-100 dark:bg-gray-800 text-gray-800 dark:text-gray-200 px-1.5 py-0.5 rounded text-sm font-mono before:content-none after:content-none;
		}

		.prose pre {
			@apply bg-gray-900 text-gray-100 p-4 rounded-lg overflow-x-auto my-6 border border-gray-200 dark:border-gray-700;
		}

		.prose pre code {
			@apply bg-transparent text-gray-100 p-0 text-sm;
		}

		.prose blockquote {
			@apply border-l-4 border-orange-500 bg-orange-50 dark:bg-orange-900/20 pl-4 py-2 italic my-6 text-gray-700 dark:text-gray-300;
		}

		/* 搜索框优化 */
		#global-search:focus {
			border: 2px solid #f97316 !important;
			box-shadow: 0 0 0 3px rgba(249, 115, 22, 0.1) !important;
		}

		/* 主题切换按钮优化 */
		#theme-toggle:focus,
		#theme-toggle:active {
			outline: none !important;
			border: none !important;
			box-shadow: none !important;
		}

		/* 重定向提示样式 */
		.redirect-notice {
			@apply bg-orange-50 dark:bg-orange-900/20 border border-orange-200 dark:border-orange-800 rounded-lg p-4 mb-6;
		}

		.redirect-notice-icon {
			@apply text-orange-600 dark:text-orange-400;
		}

		.redirect-notice-text {
			@apply text-orange-800 dark:text-orange-200;
		}
	</style>
</Layout>
