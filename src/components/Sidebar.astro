---
// src/components/Sidebar.astro - 侧边栏组件
import Icon from "./Icon.astro";
import type { MenuItem } from "../utils/menu";

export interface Props {
	menuTree: MenuItem[];
	currentPath: string;
	showMainMenu?: boolean;
	showSubMenu?: boolean;
}

const {
	menuTree,
	currentPath,
	showMainMenu = true,
	showSubMenu = true,
} = Astro.props;

console.log(menuTree);

// 找到当前激活的主菜单
const currentMainMenu = menuTree.find((item) =>
	currentPath.startsWith(item.path)
);
---

<aside class='sidebar'>
	<div class='sidebar-content'>
		<!-- 主菜单 -->
		{
			showMainMenu && (
				<div class='main-menu-section'>
					<nav class='main-menu-nav' id='main-menu'>
						{menuTree.map((menuItem) => (
							<a
								href={menuItem.path}
								data-menu={menuItem.value}
								data-path={menuItem.path}
								data-astro-prefetch
								class={`main-menu-item ${
									currentPath.startsWith(menuItem.path) ? "active" : ""
								}`}
							>
								{menuItem.icon && (
									<span class='main-menu-icon'>
										<Icon name={menuItem.icon as any} />
									</span>
								)}
								<span class='main-menu-text'>{menuItem.label}</span>
							</a>
						))}
					</nav>
				</div>
			)
		}

		<!-- 子菜单 -->
		{
			showSubMenu &&
				currentMainMenu &&
				currentMainMenu.children &&
				currentMainMenu.children.length > 0 && (
					<div class='submenu-section'>
						{/* <div class='submenu-header'>
							<h3 class='submenu-title'>{currentMainMenu.label} - 子菜单</h3>
						</div> */}

						<div class='submenu-content'>
							{(() => {
								// 检查当前主菜单是否有任何包含二级页面的项目
								const hasAnySubMenu = currentMainMenu.children.some(
									(item) => item.children && item.children.length > 0
								);

								return currentMainMenu.children.map((subItem) => {
									const isActive =
										currentPath === subItem.path ||
										currentPath.startsWith(subItem.path + "/");
									const hasChildren =
										subItem.children && subItem.children.length > 0;

									// 检查是否应该展开：当前路径匹配或者是通过主菜单直接进入
									const isMainMenuAccess = currentPath === currentMainMenu.path;
									const shouldExpand = isActive || isMainMenuAccess;

									return (
										<div class='submenu-group'>
											<a
												href={subItem.path}
												data-astro-prefetch
												class={`submenu-group-header ${isActive ? "active" : ""}`}
											>
												{hasChildren ? (
													<span
														class={`submenu-expand-arrow ${shouldExpand ? "expanded" : ""}`}
													>
														<svg
															width='20'
															height='20'
															viewBox='0 0 24 24'
															fill='none'
															stroke='currentColor'
															stroke-width='2'
														>
															<path d='m9 18 6-6-6-6' />
														</svg>
													</span>
												) : hasAnySubMenu ? (
													<span class='submenu-expand-arrow submenu-expand-placeholder'>
														{/* 隐藏的占位图标，保持布局一致 */}
													</span>
												) : null}
												<span class='submenu-group-title'>{subItem.label}</span>
											</a>

											{hasChildren && shouldExpand && subItem.children && (
												<div class='submenu-children'>
													{subItem.children.map((childItem) => (
														<div class='submenu-item'>
															<a
																href={childItem.path}
																data-astro-prefetch
																class={`submenu-item-link ${
																	currentPath === childItem.path ? "active" : ""
																}`}
															>
																<div
																	class={`submenu-indicator ${
																		currentPath === childItem.path
																			? "active"
																			: ""
																	}`}
																/>
																<span class='submenu-item-text'>
																	{childItem.label}
																</span>
															</a>
														</div>
													))}
												</div>
											)}
										</div>
									);
								});
							})()}
						</div>
					</div>
				)
		}

		<!-- 空状态提示 -->
		<!-- {
			showSubMenu &&
				(!currentMainMenu ||
					!currentMainMenu.children ||
					currentMainMenu.children.length === 0) && (
					<div class='submenu-section'>
						<div class='submenu-header'>
							<h3 class='submenu-title'>子菜单</h3>
						</div>
						<div class='submenu-placeholder'>
							<p class='placeholder-text'>选择上方菜单查看子选项</p>
						</div>
					</div>
				)
		} -->
	</div>
</aside>

<style>
	/* 侧边栏基础样式 */
	.sidebar {
		position: fixed;
		top: 4rem; /* header高度 */
		left: 0;
		width: 16rem;
		height: calc(100vh - 4rem); /* 有header时的高度 */
		border-right: 1px solid var(--a-sidebar-border);
		background-color: var(--a-sidebar-bg);
		display: flex;
		flex-direction: column;
		overflow: hidden;
		z-index: 10; /* 确保在内容之上，但在header(z-index:50)之下 */
		/* 平滑过渡效果 */
		transition:
			top 0.3s ease,
			height 0.3s ease;
	}

	/* 无header时的侧边栏位置和高度 */
	.main-layout.no-header .sidebar {
		top: 0;
		height: 100vh;
	}

	.sidebar-content {
		flex: 1 1 auto;
		overflow-y: auto !important;
		overflow-x: hidden !important;
		padding: 1rem 0.5rem;
		scrollbar-width: thin;
		scrollbar-color: var(--g-border) transparent;
		/* 确保能够正确滚动 */
		min-height: 0 !important;
		max-height: 100% !important;
		/* 平滑滚动 */
		scroll-behavior: smooth;
		/* 在 iOS 上启用惯性滚动 */
		-webkit-overflow-scrolling: touch;
	}

	.sidebar-content::-webkit-scrollbar {
		width: 4px;
	}

	.sidebar-content::-webkit-scrollbar-track {
		background: transparent;
	}

	.sidebar-content::-webkit-scrollbar-thumb {
		background: var(--g-border);
		border-radius: 2px;
		transition: background-color 0.2s ease;
	}

	.sidebar-content::-webkit-scrollbar-thumb:hover {
		background: rgba(var(--color-primary), 0.6);
	}

	/* 主菜单样式 */
	.main-menu-section {
		background-color: var(--a-main-bg);
		border-radius: 0.5rem;
		padding: 0.5rem;
		margin-bottom: 1.5rem;
	}

	.main-menu-nav {
		display: flex;
		flex-direction: column;
		gap: 0.25rem;
	}

	.main-menu-item {
		display: flex;
		align-items: center;
		width: 100%;
		padding: 0.625rem 0.75rem;
		font-size: 0.875rem;
		font-weight: 500;
		background-color: var(--a-main-item-bg);
		color: var(--a-main-item-text);
		border-radius: 0.5rem;
		text-decoration: none;
		transition: all var(--transition-normal);
	}

	.main-menu-item:hover {
		background-color: rgb(var(--color-primary) / 0.2);
		color: var(--a-main-item-text-hover);
	}

	.main-menu-item.active {
		background-color: var(--a-main-item-bg-active);
		color: var(--a-main-item-text-active);
		box-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05);
	}

	.main-menu-icon {
		margin-right: 0.75rem;
		height: 1.25rem;
		width: 1.25rem;
		display: flex;
		align-items: center;
		justify-content: center;
		color: var(--a-main-icon);
	}

	.main-menu-item.active .main-menu-icon {
		color: var(--a-main-icon-active);
	}

	.main-menu-text {
		flex: 1;
	}

	/* 子菜单全局样式 - 确保动态生成的HTML也能应用 */
	.submenu-section {
		padding: 0.5rem 1rem 0;
	}

	.submenu-content {
		display: flex;
		flex-direction: column;
		gap: 0.125rem;
	}

	/* 子菜单组 */
	.submenu-group {
		margin-bottom: 0.5rem;
	}

	.submenu-group-header {
		display: flex;
		align-items: center;
		padding: 0.75rem;
		cursor: pointer;
		border-radius: 0.375rem;
		text-decoration: none;
		transition: all var(--transition-fast);
		background-color: var(--a-sub-item-bg);
		width: 100%;
		text-align: left;
	}

	.submenu-group-header:hover {
		background-color: var(--a-sub-item-bg-hover);
	}

	.submenu-group-header.active {
		background-color: var(--a-sub-item-bg-active);
	}

	.submenu-expand-arrow {
		width: 1.5rem;
		height: 1.5rem;
		display: flex;
		align-items: center;
		justify-content: center;
		color: var(--g-text-secondary);
		transition: transform var(--transition-fast);
		flex-shrink: 0;
	}

	.submenu-expand-arrow.expanded {
		transform: rotate(90deg);
	}

	.submenu-expand-placeholder {
		opacity: 0;
		pointer-events: none;
	}

	.submenu-group-title {
		margin-left: 0.25rem;
		font-size: 0.875rem;
		font-weight: 500;
		color: var(--m-content-heading);
		flex: 1;
	}

	.submenu-group-header.active .submenu-group-title {
		color: var(--a-sub-item-text-active);
	}

	/* 子菜单子项 */
	.submenu-children {
		position: relative;
		margin-left: 0.75rem;
		margin-top: 0.25rem;
		/* 添加背景连接线 */
		background: linear-gradient(
			to bottom,
			transparent 0%,
			var(--a-sub-border) 0.5rem,
			var(--a-sub-border) calc(100% - 0.5rem),
			transparent 100%
		);
		background-size: 1px 100%;
		background-repeat: no-repeat;
		background-position: 0.75rem 0;
	}

	.submenu-item {
		position: relative;
		margin-bottom: 0.125rem;
	}

	/* 为每个子菜单项添加水平连接线 */
	.submenu-item::before {
		content: "";
		position: absolute;
		left: 0.75rem;
		top: 50%;
		width: 0.75rem;
		height: 1px;
		background-color: var(--a-sub-border);
		transform: translateY(-50%);
		opacity: 0.6;
	}

	.submenu-item-link {
		display: block; /* 改为block布局以便绝对定位 */
		padding: 0.75rem 0 0.75rem 1.5rem; /* 左侧留出指示器空间 */
		margin-left: 1.5rem;
		text-decoration: none;
		transition: all var(--transition-fast);
		position: relative;
		z-index: 1; /* 确保链接在连接线之上 */
	}

	.submenu-indicator {
		position: absolute;
		left: 0rem; /* 对齐到左侧边框的位置 */
		top: 50%;
		transform: translateY(-50%);
		width: 1px; /* 与边框线宽度一致 */
		height: 1.5rem; /* 适当的高度 */
		background-color: var(--a-sub-border-active);
		transition: all var(--transition-fast);
		opacity: 0; /* 默认隐藏 */
		z-index: 2; /* 确保在连接线之上 */
	}

	.submenu-item-link:hover .submenu-indicator {
		opacity: 1;
		background-color: var(--a-sub-border-active);
	}

	.submenu-indicator.active {
		opacity: 1;
		background-color: var(--a-sub-border-active);
	}

	.submenu-item-text {
		font-size: 0.875rem;
		color: var(--a-sub-item-text);
		transition: color var(--transition-fast);
		/* 移除margin-left，因为padding已经处理了空间 */
	}

	.submenu-item-link:hover .submenu-item-text {
		color: var(--a-sub-item-text-hover);
	}

	.submenu-item-link.active .submenu-item-text {
		color: var(--a-sub-item-text-active);
		font-weight: 500;
	}

	/* 空状态 */
	.submenu-placeholder {
		padding: 1rem 0.75rem;
		text-align: center;
	}

	.placeholder-text {
		font-size: 0.75rem;
		color: var(--g-text-muted);
		margin: 0;
	}

	/* 响应式设计 */
	@media (max-width: 768px) {
		.sidebar {
			width: 14rem;
			top: 3.5rem; /* 移动端header高度调整 */
			height: calc(100vh - 3.5rem);
		}

		.main-layout.no-header .sidebar {
			top: 0;
			height: 100vh;
		}

		.main-menu-item {
			padding: 0.5rem;
			font-size: 0.75rem;
		}

		.submenu-title {
			font-size: 0.75rem;
		}

		.submenu-group-title,
		.submenu-item-text {
			font-size: 0.75rem;
		}

		/* 移动端滚动条优化 */
		.sidebar-content::-webkit-scrollbar {
			width: 2px;
		}
	}

	@media (min-width: 1280px) {
		.sidebar {
			width: 18rem;
		}
	}
</style>

<style is:global>
	/* 子菜单全局样式 - 确保动态生成的HTML也能应用 */
	.submenu-section {
		padding: 0.5rem 1rem 0;
	}

	.submenu-content {
		display: flex;
		flex-direction: column;
		gap: 0.125rem;
	}

	/* 子菜单组 */
	.submenu-group {
		margin-bottom: 0.5rem;
	}

	.submenu-group-header {
		display: flex;
		align-items: center;
		padding: 0.75rem;
		cursor: pointer;
		border-radius: 0.375rem;
		text-decoration: none;
		transition: all var(--transition-fast);
		background-color: var(--a-sub-item-bg);
		width: 100%;
		text-align: left;
	}

	.submenu-group-header:hover {
		background-color: var(--a-sub-item-bg-hover);
	}

	.submenu-group-header.active {
		background-color: var(--a-sub-item-bg-active);
	}

	.submenu-expand-arrow {
		width: 1.5rem;
		height: 1.5rem;
		display: flex;
		align-items: center;
		justify-content: center;
		color: var(--g-text-secondary);
		transition: transform var(--transition-fast);
		flex-shrink: 0;
	}

	.submenu-expand-arrow.expanded {
		transform: rotate(90deg);
	}

	.submenu-expand-placeholder {
		opacity: 0;
		pointer-events: none;
	}

	.submenu-group-title {
		margin-left: 0.25rem;
		font-size: 0.875rem;
		font-weight: 500;
		color: var(--m-content-heading);
		flex: 1;
	}

	.submenu-group-header.active .submenu-group-title {
		color: var(--a-sub-item-text-active);
	}

	/* 子菜单子项 */
	.submenu-children {
		position: relative;
		margin-left: 0.75rem;
		margin-top: 0.25rem;
		/* 添加背景连接线 */
		background: linear-gradient(
			to bottom,
			transparent 0%,
			var(--a-sub-border) 0.5rem,
			var(--a-sub-border) calc(100% - 0.5rem),
			transparent 100%
		);
		background-size: 1px 100%;
		background-repeat: no-repeat;
		background-position: 0.75rem 0;
	}

	.submenu-item {
		position: relative;
		margin-bottom: 0.125rem;
	}

	/* 为每个子菜单项添加水平连接线 */
	.submenu-item::before {
		content: "";
		position: absolute;
		left: 0.75rem;
		top: 50%;
		width: 0.75rem;
		height: 1px;
		background-color: var(--a-sub-border);
		transform: translateY(-50%);
		opacity: 0.6;
	}

	.submenu-item-link {
		display: block; /* 改为block布局以便绝对定位 */
		padding: 0.75rem 0 0.75rem 0.75rem; /* 左侧留出指示器空间 */
		margin-left: 1.5rem;
		text-decoration: none;
		transition: all var(--transition-fast);
		position: relative;
		z-index: 1; /* 确保链接在连接线之上 */
	}

	.submenu-indicator {
		position: absolute;
		left: -0.75rem; /* 对齐到左侧边框的位置 */
		top: 50%;
		transform: translateY(-50%);
		width: 1px; /* 与边框线宽度一致 */
		height: 1.5rem; /* 适当的高度 */
		background-color: var(--a-sub-border-active);
		transition: all var(--transition-fast);
		opacity: 0; /* 默认隐藏 */
		z-index: 2; /* 确保在连接线之上 */
	}

	.submenu-item-link:hover .submenu-indicator {
		opacity: 1;
		background-color: var(--a-sub-border-active);
	}

	.submenu-indicator.active {
		opacity: 1;
		background-color: var(--a-sub-border-active);
	}

	.submenu-item-text {
		font-size: 0.875rem;
		color: var(--a-sub-item-text);
		transition: color var(--transition-fast);
		/* 移除margin-left，因为padding已经处理了空间 */
	}

	.submenu-item-link:hover .submenu-item-text {
		color: var(--a-sub-item-text-hover);
	}

	.submenu-item-link.active .submenu-item-text {
		color: var(--a-sub-item-text-active);
		font-weight: 500;
	}
</style>

<script>
	// 类型声明
	interface MenuTreeItem {
		label: string;
		path: string;
		children?: MenuTreeItem[];
		[key: string]: any;
	}

	declare global {
		interface Window {
			sidebarManager?: SidebarManager;
			SidebarManager: typeof SidebarManager;
		}
	}

	// 客户端侧边栏管理器
	class SidebarManager {
		private currentPath: string;
		private menuTree: MenuTreeItem[] | null;

		constructor() {
			this.currentPath = window.location.pathname;
			this.menuTree = null;
			this.init();
		}

		init() {
			// 从服务端获取菜单数据
			this.extractMenuData();

			// 监听路由变化
			this.setupRouteListener();

			// 绑定菜单交互事件
			this.bindMenuEvents();
		}

		extractMenuData() {
			// 从页面中提取菜单数据（通过内联脚本或data属性）
			const menuData = document.querySelector("[data-menu-tree]");
			if (menuData && menuData.textContent) {
				try {
					this.menuTree = JSON.parse(menuData.textContent);
					console.log("📋 菜单数据加载成功:", this.menuTree);
				} catch (e) {
					console.warn("⚠️ 无法解析菜单数据:", e);
				}
			} else {
				console.warn("⚠️ 未找到菜单数据元素");
			}
		}

		setupRouteListener() {
			// 监听 popstate 事件（浏览器前进后退）
			window.addEventListener("popstate", () => {
				this.updateCurrentPath(window.location.pathname);
			});

			// 监听页面路由变化（自定义事件）
			window.addEventListener("route-change", (e: Event) => {
				const customEvent = e as CustomEvent;
				if (customEvent.detail && customEvent.detail.path) {
					this.updateCurrentPath(customEvent.detail.path);
				}
			});
		}

		updateCurrentPath(newPath: string) {
			if (this.currentPath === newPath) return;

			console.log("🔄 路径更新:", this.currentPath, "->", newPath);
			this.currentPath = newPath;
			this.updateSidebar();
		}

		updateSidebar() {
			this.updateMainMenu();
			this.updateSubMenu();
		}

		updateMainMenu() {
			const mainMenuItems = document.querySelectorAll(".main-menu-item");

			mainMenuItems.forEach((item) => {
				const itemPath = item.getAttribute("data-path");
				if (itemPath && this.currentPath.startsWith(itemPath)) {
					item.classList.add("active");
				} else {
					item.classList.remove("active");
				}
			});
		}

		updateSubMenu() {
			if (!this.menuTree || !Array.isArray(this.menuTree)) {
				console.warn("⚠️ 菜单数据不可用");
				return;
			}

			// 找到当前激活的主菜单
			const currentMainMenu = this.menuTree.find((item: MenuTreeItem) =>
				this.currentPath.startsWith(item.path)
			);

			const sidebarContent = document.querySelector(".sidebar-content");
			if (!sidebarContent) {
				console.warn("⚠️ 未找到侧边栏内容容器");
				return;
			}

			const existingSubMenu = sidebarContent.querySelector(".submenu-section");

			if (
				currentMainMenu &&
				currentMainMenu.children &&
				currentMainMenu.children.length > 0
			) {
				// 生成新的子菜单HTML
				const subMenuHTML = this.generateSubMenuHTML(currentMainMenu);

				if (existingSubMenu) {
					existingSubMenu.outerHTML = subMenuHTML;
				} else {
					sidebarContent.insertAdjacentHTML("beforeend", subMenuHTML);
				}

				// 重新绑定事件
				this.bindSubMenuEvents();
			} else {
				// 移除子菜单
				if (existingSubMenu) {
					existingSubMenu.remove();
				}
			}
		}

		generateSubMenuHTML(currentMainMenu: MenuTreeItem) {
			const isMainMenuAccess = this.currentPath === currentMainMenu.path;

			// 检查当前主菜单是否有任何包含二级页面的项目
			const hasAnySubMenu = currentMainMenu.children!.some(
				(item) => item.children && item.children.length > 0
			);

			let html = `<div class='submenu-section'><div class='submenu-content'>`;

			currentMainMenu.children!.forEach((subItem: MenuTreeItem) => {
				const isActive =
					this.currentPath === subItem.path ||
					this.currentPath.startsWith(subItem.path + "/");
				const hasChildren = subItem.children && subItem.children.length > 0;
				const shouldExpand = isActive || isMainMenuAccess;

				html += `<div class='submenu-group'>`;
				html += `<a href="${this.escapeHtml(subItem.path)}" data-astro-prefetch class="submenu-group-header ${isActive ? "active" : ""}">`;

				if (hasChildren) {
					html += `<span class="submenu-expand-arrow ${shouldExpand ? "expanded" : ""}">
						<svg width='20' height='20' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'>
							<path d='m9 18 6-6-6-6' />
						</svg>
					</span>`;
				} else if (hasAnySubMenu) {
					html += `<span class='submenu-expand-arrow submenu-expand-placeholder'></span>`;
				}

				html += `<span class='submenu-group-title'>${this.escapeHtml(subItem.label)}</span></a>`;

				if (hasChildren && shouldExpand && subItem.children) {
					html += `<div class='submenu-children'>`;
					subItem.children.forEach((childItem: MenuTreeItem) => {
						const childActive = this.currentPath === childItem.path;
						html += `
							<div class='submenu-item'>
								<a href="${this.escapeHtml(childItem.path)}" data-astro-prefetch class="submenu-item-link ${childActive ? "active" : ""}">
									<div class="submenu-indicator ${childActive ? "active" : ""}"></div>
									<span class='submenu-item-text'>${this.escapeHtml(childItem.label)}</span>
								</a>
							</div>`;
					});
					html += `</div>`;
				}

				html += `</div>`;
			});

			html += `</div></div>`;
			return html;
		}

		bindMenuEvents() {
			this.bindSubMenuEvents();
		}

		bindSubMenuEvents() {
			const submenuGroups = document.querySelectorAll(".submenu-group");

			submenuGroups.forEach((group) => {
				const expandArrow = group.querySelector(
					".submenu-expand-arrow:not(.submenu-expand-placeholder)"
				) as HTMLElement;
				const childrenContainer = group.querySelector(
					".submenu-children"
				) as HTMLElement;

				if (expandArrow && childrenContainer) {
					// 移除旧的事件监听器
					const newExpandArrow = expandArrow.cloneNode(true) as HTMLElement;
					if (expandArrow.parentNode) {
						expandArrow.parentNode.replaceChild(newExpandArrow, expandArrow);
					}

					newExpandArrow.addEventListener("click", (e) => {
						e.preventDefault();
						e.stopPropagation();
						this.toggleSubmenuExpansion(newExpandArrow, childrenContainer);
					});
				}
			});
		}

		toggleSubmenuExpansion(
			expandArrow: HTMLElement,
			childrenContainer: HTMLElement
		) {
			const isExpanded = expandArrow.classList.contains("expanded");

			if (isExpanded) {
				expandArrow.classList.remove("expanded");
				childrenContainer.style.display = "none";
			} else {
				expandArrow.classList.add("expanded");
				childrenContainer.style.display = "block";
			}
		}

		escapeHtml(text: string) {
			const div = document.createElement("div");
			div.textContent = text || "";
			return div.innerHTML;
		}

		// 公共方法：供外部调用
		static getInstance() {
			if (!window.sidebarManager) {
				window.sidebarManager = new SidebarManager();
			}
			return window.sidebarManager;
		}

		static updatePath(newPath: string) {
			const instance = SidebarManager.getInstance();
			instance.updateCurrentPath(newPath);
		}
	}

	// 初始化侧边栏管理器
	document.addEventListener("DOMContentLoaded", () => {
		try {
			SidebarManager.getInstance();
			console.log("✅ 侧边栏管理器初始化成功");
		} catch (error) {
			console.error("❌ 侧边栏管理器初始化失败:", error);
		}
	});

	// 导出到全局，供客户端路由使用
	window.SidebarManager = SidebarManager;
</script>
