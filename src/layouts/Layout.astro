---
// src/layouts/Layout.astro - 主要页面布局组件
import { ViewTransitions } from 'astro:transitions';
import Header from '../components/Header.astro';
import Sidebar from '../components/Sidebar.astro';
import { buildMenuTree } from '../utils/menu';

export interface Props {
	// 基础页面属性
	title: string;
	description?: string;
	image?: string;
	canonical?: string;
	noindex?: boolean;
	
	// 布局控制
	currentPath?: string;
	showSidebar?: boolean;
	showHeader?: boolean;
	showBreadcrumb?: boolean;
	
	// 主题控制
	theme?: 'light' | 'dark' | 'auto';
	
	// 页面类型
	pageType?: 'home' | 'article' | 'index' | 'search';
}

const {
	title,
	description = "分享技术见解、生活感悟和学习心得",
	image = "/og-image.jpg",
	canonical,
	noindex = false,
	currentPath = Astro.url.pathname,
	showSidebar = true,
	showHeader = true,
	showBreadcrumb = false,
	theme = 'auto',
	pageType = 'article'
} = Astro.props;

// 获取当前 URL
const canonicalURL = canonical || new URL(Astro.url.pathname, Astro.site);
const socialImage = new URL(image, Astro.site);

// 构建菜单树（如果需要sidebar）
const menuTree = showSidebar ? await buildMenuTree() : [];
---

<!doctype html>
<html lang='zh-CN' class='scroll-smooth'>
	<head>
		<meta charset='UTF-8' />
		<meta name='description' content={description} />
		<meta name='viewport' content='width=device-width, initial-scale=1.0' />
		<link rel='icon' type='image/svg+xml' href='/favicon.svg' />
		<meta name='generator' content={Astro.generator} />

		<!-- 页面标题 -->
		<title>{title} - Fanmu</title>

		<!-- 规范链接 -->
		<link rel='canonical' href={canonicalURL} />

		<!-- 搜索引擎优化 -->
		{noindex && <meta name='robots' content='noindex, nofollow' />}

		<!-- Open Graph / Facebook -->
		<meta property='og:type' content='website' />
		<meta property='og:url' content={canonicalURL} />
		<meta property='og:title' content={`${title} - Fanmu`} />
		<meta property='og:description' content={description} />
		<meta property='og:image' content={socialImage} />
		<meta property='og:site_name' content='Fanmu - yancode.life' />
		<meta property='og:locale' content='zh_CN' />

		<!-- Twitter -->
		<meta property='twitter:card' content='summary_large_image' />
		<meta property='twitter:url' content={canonicalURL} />
		<meta property='twitter:title' content={`${title} - Fanmu`} />
		<meta property='twitter:description' content={description} />
		<meta property='twitter:image' content={socialImage} />

		<!-- 额外的 meta 标签 -->
		<meta name='author' content='Fanmu' />
		<meta name='theme-color' content='#1e40af' />

		<!-- 字体和预连接 -->
		<link rel='preconnect' href='https://fonts.googleapis.com' />
		<link rel='preconnect' href='https://fonts.gstatic.com' crossorigin />
		<link
			href='https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap'
			rel='stylesheet'
		/>
		<link
			href='https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;500;600&display=swap'
			rel='stylesheet'
		/>

		<!-- 启用 View Transitions 以获得平滑的页面切换体验 -->
		<ViewTransitions />

		<!-- 主题初始化脚本 -->
		<script is:inline define:vars={{ theme }}>
			(function initTheme() {
				console.log("🎨 初始化主题系统...");

				const savedTheme = localStorage.getItem("theme");
				const prefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
				const propTheme = theme;

				let finalTheme;
				if (savedTheme) {
					finalTheme = savedTheme;
				} else if (propTheme && propTheme !== 'auto') {
					finalTheme = propTheme;
				} else if (prefersDark) {
					finalTheme = "dark";
				} else {
					finalTheme = "light";
				}

				// 直接设置，不使用过渡
				if (finalTheme === "dark") {
					document.documentElement.classList.add("dark");
				}

				localStorage.setItem("theme", finalTheme);
				console.log("✅ 主题初始化完成:", finalTheme);
			})();
		</script>
	</head>

	<body class='min-h-screen transition-all duration-300'>
		<div class='app-layout' data-page-type={pageType}>
			<!-- 顶部导航 -->
			{showHeader && (
				<Header 
					currentPath={currentPath} 
					showSearch={true} 
					showThemeToggle={true} 
				/>
			)}

			<!-- 主要内容区域 -->
			<div class={`main-layout ${!showHeader ? 'no-header' : ''}`}>
				<!-- 左侧边栏 -->
				{showSidebar && (
					<Sidebar 
						menuTree={menuTree} 
						currentPath={currentPath} 
					/>
				)}

				<!-- 主内容区 -->
				<main class={`main-content ${showSidebar ? '' : 'full-width'}`}>
					<div class='content-container'>
						<!-- 面包屑导航 -->
						{showBreadcrumb && (
							<nav class='breadcrumb-nav' id='breadcrumb-nav'>
								<!-- 面包屑将通过脚本生成 -->
							</nav>
						)}

						<!-- 页面内容 -->
						<div class='content-area'>
							<slot />
						</div>
					</div>
				</main>
			</div>
		</div>

		<!-- 顶部加载进度条 -->
		<div class='page-loader' id='page-loader'>
			<div class='page-loader-bar' id='page-loader-bar'></div>
		</div>

		<!-- 返回顶部按钮 -->
		<button
			id='back-to-top'
			class='fixed bottom-6 right-6 w-12 h-12 btn-primary rounded-full shadow-lg transition-all duration-300 transform translate-y-20 opacity-0 z-50'
			aria-label='返回顶部'
		>
			<svg class='w-6 h-6 mx-auto' fill='none' stroke='currentColor' viewBox='0 0 24 24'>
				<path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M5 10l7-7m0 0l7 7m-7-7v18'></path>
			</svg>
		</button>

		<!-- 全局脚本 -->
		<script define:vars={{ menuTree, currentPath, showBreadcrumb }}>
			// 动态调整侧边栏位置（针对固定定位）
			function adjustSidebarPosition() {
				const header = document.querySelector('header');
				const sidebar = document.querySelector('.sidebar');
				const mainLayout = document.querySelector('.main-layout');
				
				if (sidebar) {
					let headerHeight = 0;
					
					if (header && header.offsetHeight > 0 && !mainLayout?.classList.contains('no-header')) {
						headerHeight = header.offsetHeight;
					}
					
					sidebar.style.top = headerHeight + 'px';
					sidebar.style.height = `calc(100vh - ${headerHeight}px)`;
					
					console.log("🔧 调整固定侧边栏位置:", {
						headerHeight,
						top: headerHeight + 'px',
						height: `calc(100vh - ${headerHeight}px)`,
						hasHeader: !!header && !mainLayout?.classList.contains('no-header')
					});
				}
			}

			// 全局功能初始化
			function initializeApp() {
			// 返回顶部功能
				initBackToTop();
				
				// 面包屑导航
				if (showBreadcrumb) {
					generateBreadcrumb();
				}
				
				// 其他全局功能
				initGlobalFeatures();
			}

			// 页面首次加载
			document.addEventListener("DOMContentLoaded", () => {
				initializeApp();
				// 动态调整侧边栏位置
				setTimeout(() => {
					adjustSidebarPosition();
				}, 100);
			});
			
			// 确保页面完全加载后再次调整
			window.addEventListener("load", () => {
				setTimeout(() => {
					adjustSidebarPosition();
				}, 200);
			});
			
			// View Transitions 页面切换后重新初始化
			document.addEventListener("astro:after-swap", () => {
				initializeApp();
				adjustSidebarPosition();
			});
			
			// 窗口大小改变时重新调整
			window.addEventListener("resize", adjustSidebarPosition);
			
			// 开发调试：添加全局函数供控制台测试
			window.testSidebarFixed = function() {
				const sidebar = document.querySelector('.sidebar');
				const sidebarContent = document.querySelector('.sidebar-content');
				
				if (sidebar) {
					const computedStyle = getComputedStyle(sidebar);
					console.log("🧪 测试固定侧边栏状态:");
					console.log("位置:", computedStyle.position);
					console.log("top:", computedStyle.top);
					console.log("left:", computedStyle.left);
					console.log("z-index:", computedStyle.zIndex);
					console.log("高度:", computedStyle.height);
					
					if (sidebarContent) {
						console.log("内容滚动:", {
							scrollTop: sidebarContent.scrollTop,
							scrollHeight: sidebarContent.scrollHeight,
							clientHeight: sidebarContent.clientHeight,
							canScroll: sidebarContent.scrollHeight > sidebarContent.clientHeight
						});
					}
				} else {
					console.log("❌ 未找到侧边栏");
				}
			};
			
			// 页面加载进度条控制
			let loadingTimer;
			let loadingProgress = 0;

			function showPageLoader() {
				const loader = document.getElementById("page-loader");
				const loaderBar = document.getElementById("page-loader-bar");
				
				if (loader && loaderBar) {
					// 重置进度
					loadingProgress = 0;
					loaderBar.style.width = "0%";
					
					// 显示加载条
					loader.classList.add("loading");
					document.body.classList.add("page-transitioning");
					
					// 模拟加载进度
					loadingTimer = setInterval(() => {
						loadingProgress += Math.random() * 15 + 5; // 每次增加 5-20%
						
						if (loadingProgress > 90) {
							loadingProgress = 90; // 在90%停止，等待实际完成
						}
						
						loaderBar.style.width = loadingProgress + "%";
					}, 100);
				}
			}

			function hidePageLoader() {
				const loader = document.getElementById("page-loader");
				const loaderBar = document.getElementById("page-loader-bar");
				
				if (loader && loaderBar) {
					// 清除定时器
					if (loadingTimer) {
						clearInterval(loadingTimer);
						loadingTimer = null;
					}
					
					// 立即完成到100%
					loadingProgress = 100;
					loaderBar.style.width = "100%";
					
					// 短暂延迟后隐藏
					setTimeout(() => {
						loader.classList.remove("loading");
						document.body.classList.remove("page-transitioning");
						
						// 重置进度条
						setTimeout(() => {
							loaderBar.style.width = "0%";
						}, 200);
					}, 150);
				}
			}

			// 页面切换事件监听（View Transitions）
			document.addEventListener("astro:before-preparation", showPageLoader);
			document.addEventListener("astro:after-swap", hidePageLoader);

			// 客户端路由系统
			class ClientRouter {
				constructor() {
					this.isNavigating = false;
					this.setupEventListeners();
					this.saveCurrentState();
					
					// 初始化时设置正确的菜单状态
					setTimeout(() => {
						this.updateSidebarMenus();
						// 菜单事件绑定已移至 Sidebar.astro 组件管理
					}, 100);
					
					// 页面加载完成后也更新一次菜单状态
					if (document.readyState === 'loading') {
						document.addEventListener('DOMContentLoaded', () => {
							setTimeout(() => {
								this.updateSidebarMenus();
								// 菜单事件绑定已移至 Sidebar.astro 组件管理
							}, 50);
						});
					}
				}

				saveCurrentState() {
					// 保存当前页面状态到历史记录
					history.replaceState({ 
						url: window.location.href,
						title: document.title 
					}, document.title, window.location.href);
				}

				async navigate(url, addToHistory = true) {
					if (this.isNavigating || url === window.location.href) return;
					
					this.isNavigating = true;
					console.log("🚀 开始客户端路由跳转:", url);
					showPageLoader();

					try {
						// 获取新页面内容
						const response = await fetch(url);
						if (!response.ok) throw new Error(`HTTP ${response.status}`);
						
						const html = await response.text();
						const parser = new DOMParser();
						const newDoc = parser.parseFromString(html, 'text/html');

						// 更新页面内容
						await this.updatePage(newDoc, url, addToHistory);
						
						console.log("✅ 客户端路由跳转完成");
					} catch (error) {
						console.error("❌ 客户端路由失败，回退到普通跳转:", error);
						// 如果失败，使用普通页面跳转
						window.location.href = url;
						return;
					} finally {
						this.isNavigating = false;
						hidePageLoader();
					}
				}

				async updatePage(newDoc, url, addToHistory) {
					// 添加页面切换过渡效果
					const mainContent = document.querySelector('.main-content');
					// const contentArea = document.querySelector('.content-area');
					
					// if (contentArea) {
					// 	contentArea.style.opacity = '0.7';
					// 	contentArea.style.transform = 'translateY(10px)';
					// 	contentArea.style.transition = 'opacity 0.2s ease, transform 0.2s ease';
					// }

					// 短暂延迟后开始更新内容
					await new Promise(resolve => setTimeout(resolve, 150));

					// 更新 URL 和标题
					if (addToHistory) {
						history.pushState({ 
							url: url,
							title: newDoc.title 
						}, newDoc.title, url);
					}
					document.title = newDoc.title;

					// 更新主要内容区域
					const currentMain = document.querySelector('main.main-content');
					const newMain = newDoc.querySelector('main.main-content');
					
					if (currentMain && newMain) {
						// 更新内容
						currentMain.innerHTML = newMain.innerHTML;
						
						// 更新页面类型数据属性
						const currentLayout = document.querySelector('.app-layout');
						const newLayout = newDoc.querySelector('.app-layout');
						if (currentLayout && newLayout) {
							const pageType = newLayout.getAttribute('data-page-type');
							if (pageType) {
								currentLayout.setAttribute('data-page-type', pageType);
							}
						}
					}

					// 更新 meta 标签和头部信息
					this.updateMetaTags(newDoc);

					// 重新初始化页面功能
					await this.reinitializePage();

					// 恢复内容显示效果
					const updatedContentArea = document.querySelector('.content-area');
					if (updatedContentArea) {
						updatedContentArea.style.opacity = '1';
						updatedContentArea.style.transform = 'translateY(0)';
						
						// 清理过渡样式
						setTimeout(() => {
							updatedContentArea.style.transition = '';
							updatedContentArea.style.transform = '';
						}, 300);
					}

					// 滚动到页面顶部
					window.scrollTo({ top: 0, behavior: 'smooth' });
				}

				updateMetaTags(newDoc) {
					// 更新需要的 meta 标签
					const metaSelectors = [
						'meta[name="description"]',
						'meta[property="og:title"]',
						'meta[property="og:description"]',
						'meta[property="og:url"]',
						'meta[name="twitter:title"]',
						'meta[name="twitter:description"]'
					];

					metaSelectors.forEach(selector => {
						const currentMeta = document.querySelector(selector);
						const newMeta = newDoc.querySelector(selector);
						
						if (currentMeta && newMeta) {
							const content = newMeta.getAttribute('content');
							if (content) {
								currentMeta.setAttribute('content', content);
							}
						} else if (!currentMeta && newMeta) {
							document.head.appendChild(newMeta.cloneNode(true));
						}
					});

					// 更新 canonical URL
					const currentCanonical = document.querySelector('link[rel="canonical"]');
					const newCanonical = newDoc.querySelector('link[rel="canonical"]');
					if (currentCanonical && newCanonical) {
						currentCanonical.setAttribute('href', newCanonical.getAttribute('href'));
					}
				}

				async reinitializePage() {
					console.log("🔄 重新初始化页面功能");
					
					// 重新初始化应用功能
					initBackToTop();
					if (showBreadcrumb) {
						generateBreadcrumb();
					}
					initGlobalFeatures();
					
					// 更新侧边栏菜单状态
					this.updateSidebarMenus();
					
					// 触发自定义事件，让其他组件知道页面已更新
					window.dispatchEvent(new CustomEvent('clientRouteComplete', {
						detail: { url: window.location.href }
					}));

					// 短暂延迟确保所有功能初始化完成
					await new Promise(resolve => setTimeout(resolve, 50));
				}

				updateSidebarMenus() {
					const currentPath = decodeURIComponent(window.location.pathname);
					console.log("🔄 更新侧边栏菜单状态，当前路径:", currentPath);
					console.log("🔄 原始路径:", window.location.pathname);
					
					// 更新主菜单状态
					this.updateMainMenu(currentPath);
					
					// 更新子菜单状态
					this.updateSubMenu(currentPath);
				}

				updateMainMenu(currentPath) {
					const mainMenuItems = document.querySelectorAll('.main-menu-item');
					let currentMainMenu = null;
					
					mainMenuItems.forEach(item => {
						const itemPath = item.getAttribute('data-path');
						const menuValue = item.getAttribute('data-menu');
						
						if (itemPath && currentPath.startsWith(itemPath)) {
							item.classList.add('active');
							currentMainMenu = {
								path: itemPath,
								value: menuValue
							};
						} else {
							item.classList.remove('active');
						}
					});
					
					return currentMainMenu;
				}

				updateSubMenu(currentPath) {
					// 使用 Sidebar 组件的管理器来更新菜单
					if (window.SidebarManager) {
						window.SidebarManager.updatePath(currentPath);
					}
				}

				// 旧的菜单渲染函数已移除，现在统一使用 Sidebar 组件

				setupEventListeners() {
					// 拦截链接点击事件
					document.addEventListener('click', (e) => {
						const link = e.target.closest('a');
						if (!link || !link.href) return;

						// 优先检查锚点链接
						const href = link.href;
						const currentPageUrl = window.location.href.split('#')[0];
						const linkPageUrl = href.split('#')[0];
						const hash = href.split('#')[1];

						// 如果是同页面的锚点链接，优先处理平滑滚动
						if (hash && linkPageUrl === currentPageUrl) {
								e.preventDefault();
								e.stopPropagation();
								
							const target = document.getElementById(hash);
							if (target) {
								const headerHeight = document.querySelector("header")?.offsetHeight || 0;
								const stickyTocOffset = 120; // 给sticky目录留出空间，与目录高亮检测保持一致
								const targetPosition = target.offsetTop - headerHeight - stickyTocOffset;
								
								// 平滑滚动到目标位置
								window.scrollTo({ 
									top: Math.max(0, targetPosition), 
									behavior: "smooth" 
								});

								// 更新URL中的锚点
								if (history.replaceState) {
									history.replaceState(null, null, href);
								}

								// 滚动完成后更新目录高亮
								setTimeout(() => {
									// 触发自定义事件通知目录更新
									window.dispatchEvent(new CustomEvent('anchorScrollComplete', {
										detail: { hash: hash, target: target }
									}));
								}, 800); // 等待平滑滚动完成

								console.log("🔗 锚点链接平滑滚动:", {
									hash: hash,
									targetId: target.id,
									targetOffsetTop: target.offsetTop,
									headerHeight: headerHeight,
									stickyTocOffset: stickyTocOffset,
									finalScrollPosition: targetPosition
								});
							}
							return; // 提前返回，不执行后续的客户端路由检查
						}

						// 检查是否应该使用客户端路由
						if (this.shouldUseClientRouting(link)) {
							e.preventDefault();
							console.log("🔗 拦截链接点击，使用客户端路由:", link.href);
							this.navigate(link.href);
						}
					});

					// 处理浏览器前进后退
					window.addEventListener('popstate', (e) => {
						console.log("⬅️ 浏览器前进后退事件:", e.state);
						if (e.state && e.state.url) {
							this.navigate(e.state.url, false);
						} else {
							// 兜底处理
							window.location.reload();
						}
					});

					// 页面可见性变化处理
					document.addEventListener('visibilitychange', () => {
						if (!document.hidden && this.isNavigating) {
							// 页面重新可见且正在导航中，确保隐藏加载条
							setTimeout(() => {
								if (this.isNavigating) {
									hidePageLoader();
									this.isNavigating = false;
								}
							}, 100);
						}
					});
				}

				shouldUseClientRouting(link) {
					const href = link.href;
					
					// 基本检查
					if (!href || href === '#') return false;
					
					// 检查是否为站内链接
					const isInternalLink = href.startsWith(window.location.origin);
					if (!isInternalLink) return false;
					
					// 排除锚点链接
					const isHashLink = href.includes('#') && 
						href.split('#')[0] === window.location.href.split('#')[0];
					if (isHashLink) return false;
					
					// 排除外部链接
					const isExternalLink = link.hasAttribute('target') && 
						link.getAttribute('target') === '_blank';
					if (isExternalLink) return false;
					
					// 排除下载链接
					const hasDownload = link.hasAttribute('download');
					if (hasDownload) return false;
					
					// 排除特殊协议
					if (href.startsWith('mailto:') || href.startsWith('tel:')) return false;
					
					// 排除 API 路径
					if (href.includes('/api/')) return false;
					
					console.log("✅ 链接符合客户端路由条件:", href);
					return true;
				}
			}

			// 初始化客户端路由（仅在支持时）
			let clientRouter = null;
			if (typeof window !== 'undefined' && 'history' in window && 'pushState' in history) {
				clientRouter = new ClientRouter();
				console.log("🚀 客户端路由系统已启动");
			} else {
				console.warn("⚠️ 浏览器不支持客户端路由，使用传统页面跳转");
				// 回退到传统链接监听
				setupFallbackLinkListeners();
			}

			// 传统链接监听（兜底方案）
			function setupFallbackLinkListeners() {
				document.addEventListener("click", (e) => {
					const link = e.target.closest("a");
					if (!link || !link.href) return;

					const isInternalLink = link.href.startsWith(window.location.origin);
					const isHashLink = link.href.includes("#") && 
						link.href.split("#")[0] === window.location.href.split("#")[0];
					const isExternalLink = link.hasAttribute("target") && 
						link.getAttribute("target") === "_blank";

					if (isInternalLink && !isHashLink && !isExternalLink) {
						console.log("传统页面跳转:", link.href);
						showPageLoader();
						setTimeout(hidePageLoader, 2000);
					}
				});

				window.addEventListener("popstate", () => {
					showPageLoader();
					setTimeout(hidePageLoader, 1000);
				});

				// 子菜单功能已移至 Sidebar.astro 组件管理
			}

			// 返回顶部功能
			function initBackToTop() {
				const backToTopButton = document.getElementById("back-to-top");
				if (!backToTopButton) return;

				window.addEventListener("scroll", () => {
					if (window.pageYOffset > 300) {
						backToTopButton.classList.remove("translate-y-20", "opacity-0");
						backToTopButton.classList.add("translate-y-0", "opacity-100");
				} else {
						backToTopButton.classList.add("translate-y-20", "opacity-0");
						backToTopButton.classList.remove("translate-y-0", "opacity-100");
					}
				});

				backToTopButton.addEventListener("click", () => {
					window.scrollTo({ top: 0, behavior: "smooth" });
				});
			}

			// 生成面包屑导航
			function generateBreadcrumb() {
				const breadcrumbNav = document.getElementById("breadcrumb-nav");
				if (!breadcrumbNav || !currentPath || currentPath === '/') return;

				const pathParts = currentPath.split("/").filter(Boolean);
				if (pathParts.length === 0) return;

				let html = '<ol class="flex items-center space-x-2 text-sm">';
				html += '<li><a href="/" class="text-gray-500 hover:text-gray-700">首页</a></li>';

				let builtPath = "";
				pathParts.forEach((part, index) => {
					builtPath += "/" + part;
					const isLast = index === pathParts.length - 1;
					const menuItem = findMenuItemByPath(menuTree, builtPath);
					const label = menuItem ? menuItem.label : decodeURIComponent(part);

					html += `
						<li class="flex items-center">
							<svg class="w-4 h-4 mx-2 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
								<path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
							</svg>
							${isLast 
								? `<span class="text-gray-700 font-medium">${label}</span>`
								: `<a href="${builtPath}" class="text-gray-500 hover:text-gray-700">${label}</a>`
							}
						</li>
					`;
				});

				html += '</ol>';
				breadcrumbNav.innerHTML = html;
			}

			// 查找菜单项
			function findMenuItemByPath(menuTree, targetPath) {
				function searchMenu(items) {
					for (const item of items) {
						if (item.path === targetPath) return item;
						if (item.children?.length > 0) {
							const found = searchMenu(item.children);
							if (found) return found;
						}
					}
					return null;
				}
				return searchMenu(menuTree);
			}

			// 其他全局功能
			function initGlobalFeatures() {
				// 外部链接处理
				document.querySelectorAll('a[href^="http"]').forEach((link) => {
					if (!link.href.startsWith(window.location.origin)) {
						link.setAttribute("target", "_blank");
						link.setAttribute("rel", "noopener noreferrer");
					}
				});

				// 锚点链接处理已移至客户端路由的事件监听器中
				// 避免重复绑定和事件冲突

				// 传统的纯锚点链接处理（兼容性）- 为新添加的元素
				document.querySelectorAll('a[href^="#"]:not([data-scroll-bound])').forEach((anchor) => {
					anchor.setAttribute('data-scroll-bound', 'true');
					anchor.addEventListener("click", function (e) {
						e.preventDefault();
						const target = document.querySelector(this.getAttribute("href"));
						if (target) {
							const headerHeight = document.querySelector("header")?.offsetHeight || 0;
							const targetPosition = target.offsetTop - headerHeight - 20;
							window.scrollTo({ top: targetPosition, behavior: "smooth" });
						}
					});
				});

				// 子菜单功能已完全移至 Sidebar.astro 组件管理
				// 无需在此处重复处理
			}
		</script>

		<!-- 菜单数据传递给客户端 -->
		<script type="application/json" data-menu-tree set:html={JSON.stringify(menuTree)}></script>
		
		<!-- Markdown 增强脚本 -->
		<script>
			// 直接内联 Markdown 增强脚本以确保正确加载
			// 主题映射配置
			const THEME_PATTERNS = [
				{
					patterns: ['tip:', 'tips:', '提示：', '💡'],
					theme: 'info',
					icon: '💡',
					label: '提示'
				},
				{
					patterns: ['success:', 'ok:', '成功：', '✅'],
					theme: 'success', 
					icon: '✅',
					label: '成功'
				},
				{
					patterns: ['warning:', 'warn:', 'caution:', '警告：', '注意：', '⚠️'],
					theme: 'warning',
					icon: '⚠️', 
					label: '警告'
				},
				{
					patterns: ['error:', 'danger:', 'fail:', '错误：', '失败：', '❌'],
					theme: 'error',
					icon: '❌',
					label: '错误'
				}
			];

			/**
			 * 检测文本是否匹配主题模式
			 */
			function detectTheme(text: string) {
				const trimmedText = text.trim();
				const lowerText = trimmedText.toLowerCase();
				
				for (const themeConfig of THEME_PATTERNS) {
					for (const pattern of themeConfig.patterns) {
						const lowerPattern = pattern.toLowerCase();
						if (lowerText.startsWith(lowerPattern)) {
							// 确保模式后面是空格、冒号或文本结尾
							const afterPattern = lowerText.slice(lowerPattern.length);
							if (afterPattern === '' || afterPattern.startsWith(' ') || afterPattern.startsWith(':')) {
								return {
									...themeConfig,
									matchedPattern: pattern,
									remainingText: trimmedText.slice(pattern.length).replace(/^[:\s]+/, '').trim()
								};
							}
						}
					}
				}
				
				return null;
			}

			/**
			 * 创建主题化的 blockquote 元素
			 */
			function createThemedBlockquote(themeInfo: any, content: string) {
				const blockquote = document.createElement('blockquote');
				blockquote.setAttribute('data-theme', themeInfo.theme);
				
				// 创建标题部分
				const title = document.createElement('strong');
				title.textContent = `${themeInfo.icon} ${themeInfo.label}：`;
				
				// 创建内容段落
				const paragraph = document.createElement('p');
				paragraph.appendChild(title);
				
				// 如果有剩余文本，添加到段落中
				if (themeInfo.remainingText) {
					paragraph.appendChild(document.createTextNode(' ' + themeInfo.remainingText));
				}
				
				blockquote.appendChild(paragraph);
				
				return blockquote;
			}

			/**
			 * 处理已经渲染的 strong 元素
			 */
			function processStrongElements(container: HTMLElement) {
				const strongElements = container.querySelectorAll('strong');
				const replacements: any[] = [];
				
				strongElements.forEach(strongEl => {
					const text = strongEl.textContent;
					const themeInfo = detectTheme(text || '');
					
					if (themeInfo) {
						console.log('🎯 找到匹配的 strong 元素:', text, '主题:', themeInfo.theme);
						
						// 检查是否为独立的提示框（整个段落只有这个 strong 元素）
						const parent = strongEl.parentNode as HTMLElement;
						const isStandaloneAlert = (parent as HTMLElement).tagName === 'P' && 
							(parent as HTMLElement).children.length === 1 && 
							(parent as HTMLElement).textContent?.trim() === strongEl.textContent?.trim();
						
						replacements.push({
							element: strongEl,
							themeInfo: themeInfo,
							isStandalone: isStandaloneAlert
						});
					}
				});
				
				// 执行替换
				replacements.forEach(replacement => {
					const { element, themeInfo, isStandalone } = replacement;
					
					if (isStandalone) {
						// 如果是独立的提示框，替换整个段落为 blockquote
						const blockquote = createThemedBlockquote(themeInfo, themeInfo.remainingText);
						const parent = element.parentNode;
						parent.parentNode.replaceChild(blockquote, parent);
					} else {
						// 如果是混合内容，只将 strong 元素转换为主题化的 span
						const themedSpan = createThemedSpan(themeInfo, themeInfo.remainingText);
						element.parentNode.replaceChild(themedSpan, element);
					}
				});
				
				return replacements.length;
			}
			
			/**
			 * 创建主题化的 span 元素（用于内联显示）
			 */
			function createThemedSpan(themeInfo: any, content: string) {
				const span = document.createElement('span');
				span.setAttribute('data-theme', themeInfo.theme);
				span.className = 'inline-alert';
				
				// 添加图标和内容
				span.textContent = `${themeInfo.icon} ${themeInfo.label}${content ? ': ' + content : ''}`;
				
				return span;
			}

			/**
			 * 遍历并处理所有文本节点
			 */
			function processNode(node: Node) {
				if (node.nodeType === Node.TEXT_NODE) {
					// 移除未定义的 processTextNode 调用
					// processTextNode(node);
				} else if (node.nodeType === Node.ELEMENT_NODE) {
					// 避免处理已经是 blockquote 的元素
					const element = node as Element;
					if (element.tagName !== 'BLOCKQUOTE' && element.tagName !== 'CODE' && element.tagName !== 'PRE') {
						// 转换为数组以避免在遍历时修改集合
						const childNodes = Array.from(node.childNodes);
						childNodes.forEach(child => processNode(child));
					}
				}
			}

			/**
			 * 处理页面中的 Markdown 内容
			 */
			function processMarkdown() {
				console.log('🔍 开始处理 Markdown 内容...');
				
				// 查找文章内容容器
				const articleContainer = document.querySelector('.article-content') as HTMLElement;
				
				if (articleContainer) {
					console.log('✅ 找到文章容器:', articleContainer);
					console.log('📝 容器内容预览:', articleContainer.textContent ? articleContainer.textContent.substring(0, 200) : '无内容');
					
					// 处理已渲染的 strong 元素
					const processedCount = processStrongElements(articleContainer);
					console.log(`✅ Markdown 主题化处理完成，处理了 ${processedCount} 个元素`);
				} else {
					console.warn('❌ 未找到 .article-content 容器');
					console.log('🔍 当前页面所有容器:', document.querySelectorAll('[class*="content"], [class*="article"]'));
				}
			}

			/**
			 * 初始化 Markdown 增强功能
			 */
			function initMarkdownEnhancer() {
				// 等待 DOM 加载完成
				if (document.readyState === 'loading') {
					document.addEventListener('DOMContentLoaded', processMarkdown);
				} else {
					processMarkdown();
				}
			}

			// 自动初始化
			initMarkdownEnhancer();

			// 监听客户端路由完成事件，重新处理新页面内容
			window.addEventListener('clientRouteComplete', () => {
				setTimeout(processMarkdown, 100);
			});
		</script>
	</body>
</html>

<style is:global>
	/* 导入全局样式 */
	@import "../styles/global.css";

	/* 应用布局 */
	.app-layout {
		min-height: 100vh;
		background-color: var(--g-bg);
		display: flex;
		flex-direction: column;
	}

	/* 主布局 */
	.main-layout {
		display: block; /* 改为block布局，因为侧边栏现在是fixed */
		flex: 1;
		height: calc(100vh - 4rem);
	}

	.main-layout.no-header {
		height: 100vh;
	}

	/* 主内容区 */
	.main-content {
		margin-left: 16rem; /* 为固定侧边栏留出空间 */
		overflow: visible; /* 改为visible以支持sticky定位 */
		background-color: var(--m-content-bg);
		height: 100%;
		/* Firefox 滚动条样式 */
		scrollbar-width: thin;
		scrollbar-color: var(--g-border) transparent;
		/* 平滑滚动 */
		scroll-behavior: smooth;
		/* 在 iOS 上启用惯性滚动 */
		-webkit-overflow-scrolling: touch;
	}

	.main-content.full-width {
		margin-left: 0; /* 无侧边栏时取消左边距 */
		width: 100%;
	}

	/* 主内容区滚动条样式 */
	.main-content::-webkit-scrollbar {
		width: 6px;
	}

	.main-content::-webkit-scrollbar-track {
		background: transparent;
	}

	.main-content::-webkit-scrollbar-thumb {
		background: var(--g-border);
		border-radius: 3px;
		transition: background-color var(--transition-normal);
	}

	.main-content::-webkit-scrollbar-thumb:hover {
		background: rgba(var(--color-primary), 0.6);
	}

	.content-container {
		padding: 1.5rem 2rem;
		max-width: none;
	}

	.content-area {
		max-width: none;
	}

	/* 面包屑导航 */
	.breadcrumb-nav {
		margin-bottom: 1.5rem;
		padding-bottom: 1rem;
		border-bottom: 1px solid var(--b-crumb-border);
	}

	/* 返回顶部按钮 */
	#back-to-top {
		background: var(--btn-primary-bg);
		color: var(--btn-primary-text);
	}

	#back-to-top:hover {
		background: var(--btn-primary-bg-hover);
		transform: translateY(-1px) scale(1.05);
	}

	/* 移动端适配 */
	@media (max-width: 768px) {
		.content-container {
			padding: 1rem;
		}

		/* 移动端主内容区域 - 占据全宽 */
		.main-content {
			margin-left: 0 !important; /* 移动端不预留侧边栏空间 */
			width: 100%;
		}

		.main-content.full-width {
			margin-left: 0;
		}

		/* 移动端优化滚动条 */
		.main-content::-webkit-scrollbar {
			width: 2px;
		}

		/* 移动端菜单激活时禁止主内容滚动 */
		body.mobile-menu-active .main-content {
			overflow: hidden;
		}
	}

	@media (min-width: 1280px) {
		.content-container {
			padding: 2rem 3rem;
		}

		/* 大屏幕主内容区域适配 */
		.main-content {
			margin-left: 18rem; /* 适配大屏幕侧边栏宽度 */
		}

		.main-content.full-width {
			margin-left: 0;
		}
	}

	/* 页面类型特定样式 */
	.app-layout[data-page-type="home"] {
		/* 首页特定样式 */
	}

	.app-layout[data-page-type="article"] {
		/* 文章页面特定样式 */
	}

	/* View Transitions 配置 - 禁用所有动画，使用顶部加载条 */
	@view-transition {
		navigation: auto;
	}

	/* 完全禁用所有 View Transitions 动画 */
	::view-transition-old(root),
	::view-transition-new(root) {
		animation: none;
	}

	/* 顶部加载进度条 */
	.page-loader {
		position: fixed;
		top: 0;
		left: 0;
		right: 0;
		height: 3px;
		z-index: 9999;
		pointer-events: none;
		opacity: 0;
		transition: opacity var(--transition-fast) ease-in-out;
	}

	.page-loader.loading {
		opacity: 1;
	}

	.page-loader-bar {
		height: 100%;
		background: linear-gradient(
			90deg,
			rgb(var(--color-primary)) 0%,
			rgba(251, 146, 60, 0.8) 50%,
			rgb(var(--color-primary)) 100%
		);
		border-radius: 0 2px 2px 0;
		position: relative;
		overflow: hidden;
		width: 0%;
		transition: width var(--transition-normal) var(--theme-transition-easing);
	}

	.page-loader-bar::after {
		content: '';
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background: linear-gradient(
			90deg,
			transparent 0%,
			rgba(255, 255, 255, 0.4) 50%,
			transparent 100%
		);
		animation: shimmer 1.5s infinite;
	}

	@keyframes shimmer {
		0% {
			transform: translateX(-100%);
		}
		100% {
			transform: translateX(100%);
		}
	}

	/* 页面切换时的反馈 */
	.page-transitioning {
		cursor: wait;
	}

	.page-transitioning .main-content {
		pointer-events: none;
	}
	
	/* 客户端路由页面切换效果 */
	.content-area {
		transition: opacity var(--transition-fast) ease, transform var(--transition-fast) ease;
	}
	
	.content-area.transitioning {
		opacity: 0.7;
		transform: translateY(10px);
	}
	
	/* 优化链接点击反馈 */
	a {
		transition: opacity var(--transition-fast) ease;
	}
	
	a:active {
		opacity: 0.7;
	}
	
	/* 客户端路由专用加载状态 */
	.client-routing-active {
		position: relative;
	}
	
	.client-routing-active::before {
		content: '';
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background: rgba(255, 255, 255, 0.1);
		pointer-events: none;
		opacity: 0;
		transition: opacity var(--transition-fast) ease;
	}
	
	.client-routing-active.loading::before {
		opacity: 1;
	}

	/* 主菜单字体样式调整 */
	.main-menu-item {
		font-size: 0.8125rem !important;
		font-weight: 500 !important;
	}

	.main-menu-text {
		font-size: inherit;
	}

	/* 子菜单样式已完全移至 Sidebar.astro 组件统一管理 */
	/* 避免样式冲突，此处不再定义 submenu 相关样式 */
</style>

