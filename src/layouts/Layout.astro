---
// src/layouts/Layout.astro - 修复后的Layout组件
export interface Props {
	title: string;
	description?: string;
	image?: string;
	canonical?: string;
	noindex?: boolean;
}

const {
	title,
	description = "分享技术见解、生活感悟和学习心得",
	image = "/og-image.jpg",
	canonical,
	noindex = false,
} = Astro.props;

// 获取当前 URL
const canonicalURL = canonical || new URL(Astro.url.pathname, Astro.site);
const socialImage = new URL(image, Astro.site);
---

<!doctype html>
<html lang='zh-CN' class='scroll-smooth'>
	<head>
		<meta charset='UTF-8' />
		<meta name='description' content={description} />
		<meta name='viewport' content='width=device-width, initial-scale=1.0' />
		<link rel='icon' type='image/svg+xml' href='/favicon.svg' />
		<meta name='generator' content={Astro.generator} />

		<!-- 页面标题 -->
		<title>{title} - Fanmu</title>

		<!-- 规范链接 -->
		<link rel='canonical' href={canonicalURL} />

		<!-- 搜索引擎优化 -->
		{noindex && <meta name='robots' content='noindex, nofollow' />}

		<!-- Open Graph / Facebook -->
		<meta property='og:type' content='website' />
		<meta property='og:url' content={canonicalURL} />
		<meta property='og:title' content={`${title} - Fanmu`} />
		<meta property='og:description' content={description} />
		<meta property='og:image' content={socialImage} />
		<meta property='og:site_name' content='Fanmu - yancode.life' />
		<meta property='og:locale' content='zh_CN' />

		<!-- Twitter -->
		<meta property='twitter:card' content='summary_large_image' />
		<meta property='twitter:url' content={canonicalURL} />
		<meta property='twitter:title' content={`${title} - Fanmu`} />
		<meta property='twitter:description' content={description} />
		<meta property='twitter:image' content={socialImage} />

		<!-- 额外的 meta 标签 -->
		<meta name='author' content='Fanmu' />
		<meta name='theme-color' content='#f97316' />

		<!-- RSS 订阅 -->
		<link
			rel='alternate'
			type='application/rss+xml'
			title='Fanmu - RSS Feed'
			href='/rss.xml'
		/>

		<!-- 预连接到外部资源 -->
		<link rel='preconnect' href='https://fonts.googleapis.com' />
		<link rel='preconnect' href='https://fonts.gstatic.com' crossorigin />
		<link rel='preconnect' href='https://images.unsplash.com' />

		<!-- 字体 -->
		<link
			href='https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap'
			rel='stylesheet'
		/>
		<link
			href='https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;500;600&display=swap'
			rel='stylesheet'
		/>

		<!-- 结构化数据 -->
		<script type='application/ld+json'>
			{
				"@context": "https://schema.org",
				"@type": "WebSite",
				"name": "Fanmu - yancode.life",
				"description": "分享技术见解、生活感悟和学习心得",
				"url": "https://yancode.life",
				"author": {
					"@type": "Person",
					"name": "Fanmu",
					"url": "https://yancode.life/about"
				},
				"potentialAction": {
					"@type": "SearchAction",
					"target": "https://yancode.life/search?q={search_term_string}",
					"query-input": "required name=search_term_string"
				}
			}
		</script>

		<!-- 主题初始化脚本（避免闪烁） - 必须在页面加载前执行 -->
		<script is:inline>
			// 立即执行的主题初始化函数
			(function initTheme() {
				console.log("🎨 初始化主题系统...");

				// 获取存储的主题
				const savedTheme = localStorage.getItem("theme");
				// 检查系统偏好
				const prefersDark = window.matchMedia(
					"(prefers-color-scheme: dark)"
				).matches;

				// 确定要应用的主题
				let theme;
				if (savedTheme) {
					theme = savedTheme;
					console.log("📦 使用存储的主题:", theme);
				} else if (prefersDark) {
					theme = "dark";
					console.log("🌙 使用系统偏好: 深色模式");
				} else {
					theme = "light";
					console.log("☀️ 使用默认主题: 浅色模式");
				}

				// 应用主题到文档
				if (theme === "dark") {
					document.documentElement.classList.add("dark");
				} else {
					document.documentElement.classList.remove("dark");
				}

				// 保存到 localStorage
				localStorage.setItem("theme", theme);

				console.log("✅ 主题初始化完成:", theme);
			})();
		</script>
	</head>

	<body class='min-h-screen transition-all duration-300 animate-fade-in'>
		<!-- 页面内容 -->
		<slot />

		<!-- 返回顶部按钮 -->
		<button
			id='back-to-top'
			class='fixed bottom-6 right-6 w-12 h-12 btn-primary rounded-full shadow-lg transition-all duration-300 transform translate-y-20 opacity-0 z-50 glow-effect'
			aria-label='返回顶部'
		>
			<svg
				class='w-6 h-6 mx-auto'
				fill='none'
				stroke='currentColor'
				viewBox='0 0 24 24'
			>
				<path
					stroke-linecap='round'
					stroke-linejoin='round'
					stroke-width='2'
					d='M5 10l7-7m0 0l7 7m-7-7v18'></path>
			</svg>
		</button>

		<!-- 全局脚本 -->
		<script>
			// 返回顶部功能
			const backToTopButton = document.getElementById("back-to-top");

			// 监听滚动事件
			window.addEventListener("scroll", () => {
				if (window.pageYOffset > 300) {
					backToTopButton?.classList.remove("translate-y-20", "opacity-0");
					backToTopButton?.classList.add("translate-y-0", "opacity-100");
				} else {
					backToTopButton?.classList.add("translate-y-20", "opacity-0");
					backToTopButton?.classList.remove("translate-y-0", "opacity-100");
				}
			});

			// 点击返回顶部
			backToTopButton?.addEventListener("click", () => {
				window.scrollTo({
					top: 0,
					behavior: "smooth",
				});
			});

			// 键盘快捷键
			document.addEventListener("keydown", (e) => {
				// Ctrl/Cmd + K 打开搜索
				if ((e.ctrlKey || e.metaKey) && e.key === "k") {
					e.preventDefault();
					const searchInput = document.querySelector('input[type="search"]');
					if (searchInput) {
						(searchInput as HTMLInputElement).focus();
					}
				}

				// Home 键返回顶部
				if (e.key === "Home" && e.ctrlKey) {
					e.preventDefault();
					window.scrollTo({ top: 0, behavior: "smooth" });
				}

				// End 键到达底部
				if (e.key === "End" && e.ctrlKey) {
					e.preventDefault();
					window.scrollTo({
						top: document.body.scrollHeight,
						behavior: "smooth",
					});
				}
			});

			// 图片懒加载增强
			if ("IntersectionObserver" in window) {
				const imageObserver = new IntersectionObserver((entries, observer) => {
					entries.forEach((entry) => {
						if (entry.isIntersecting) {
							const img = entry.target;
							if (img instanceof HTMLImageElement && img.dataset.src) {
								img.src = img.dataset.src;
								img.removeAttribute("data-src");
								img.classList.remove("blur-sm");
								img.classList.add("animate-fade-in");
								observer.unobserve(img);
							}
						}
					});
				});

				// 观察所有带有 data-src 的图片
				document.querySelectorAll("img[data-src]").forEach((img) => {
					imageObserver.observe(img);
				});
			}

			// 外部链接处理
			document.querySelectorAll('a[href^="http"]').forEach((link) => {
				if (
					link instanceof HTMLAnchorElement &&
					!link.href.startsWith(window.location.origin)
				) {
					link.setAttribute("target", "_blank");
					link.setAttribute("rel", "noopener noreferrer");
					// 添加外部链接图标
					const icon = document.createElement("span");
					icon.innerHTML = `
						<svg class="w-3 h-3 ml-1 inline-block" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"/>
						</svg>
					`;
					link.appendChild(icon);
				}
			});

			// 代码复制功能增强
			document.querySelectorAll("pre").forEach((pre) => {
				const code = pre.querySelector("code");
				if (code) {
					const button = document.createElement("button");
					button.innerHTML = `
						<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
						</svg>
					`;
					button.className =
						"absolute top-3 right-3 p-2 rounded-lg transition-all duration-200 opacity-70 hover:opacity-100 btn-secondary text-sm";
					button.setAttribute("aria-label", "复制代码");
					button.setAttribute("data-tooltip", "复制代码");

					pre.style.position = "relative";
					pre.appendChild(button);

					button.addEventListener("click", async () => {
						try {
							await navigator.clipboard.writeText(code.textContent || "");
							button.innerHTML = `
								<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
								</svg>
							`;
							button.setAttribute("data-tooltip", "已复制！");
							button.classList.add("text-green-600");

							setTimeout(() => {
								button.innerHTML = `
									<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
									</svg>
								`;
								button.setAttribute("data-tooltip", "复制代码");
								button.classList.remove("text-green-600");
							}, 2000);
						} catch (err) {
							console.error("复制失败:", err);
							button.setAttribute("data-tooltip", "复制失败");
							button.classList.add("text-red-600");
							setTimeout(() => {
								button.setAttribute("data-tooltip", "复制代码");
								button.classList.remove("text-red-600");
							}, 2000);
						}
					});
				}
			});

			// 平滑滚动增强
			document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
				anchor.addEventListener("click", function (this: HTMLAnchorElement, e) {
					e.preventDefault();
					const target = document.querySelector(
						this.getAttribute("href") || ""
					);
					if (target instanceof HTMLElement) {
						const headerHeight =
							document.querySelector("header")?.offsetHeight || 0;
						const targetPosition = target.offsetTop - headerHeight - 20;

						window.scrollTo({
							top: targetPosition,
							behavior: "smooth",
						});
					}
				});
			});

			// 主题系统增强
			function enhanceThemeSystem() {
				// 监听系统主题变化
				const mediaQuery = window.matchMedia("(prefers-color-scheme: dark)");
				mediaQuery.addEventListener("change", (e) => {
					const savedTheme = localStorage.getItem("theme");
					// 只有在没有用户偏好时才跟随系统变化
					if (!savedTheme) {
						const newTheme = e.matches ? "dark" : "light";
						console.log("🔄 系统主题变化，切换到:", newTheme);
						document.documentElement.classList.toggle("dark", e.matches);
						localStorage.setItem("theme", newTheme);
					}
				});
			}

			// 初始化主题系统增强功能
			document.addEventListener("DOMContentLoaded", enhanceThemeSystem);

			// 支持 Astro View Transitions
			document.addEventListener("astro:after-swap", () => {
				console.log("🔄 页面切换，重新初始化主题...");
				const savedTheme = localStorage.getItem("theme");
				if (savedTheme === "dark") {
					document.documentElement.classList.add("dark");
				} else {
					document.documentElement.classList.remove("dark");
				}
				enhanceThemeSystem();
			});

			// 性能监控（开发环境）
			if (window.location.hostname === "localhost" && "performance" in window) {
				// 监控 LCP (Largest Contentful Paint)
				if ("PerformanceObserver" in window) {
					const lcpObserver = new PerformanceObserver((list) => {
						const entries = list.getEntries();
						const lastEntry = entries[entries.length - 1];
						console.log("LCP:", lastEntry.startTime);
					});
					lcpObserver.observe({ entryTypes: ["largest-contentful-paint"] });

					// 监控 CLS (Cumulative Layout Shift)
					const clsObserver = new PerformanceObserver((list) => {
						let clsValue = 0;
						for (const entry of list.getEntries()) {
							if ("value" in entry) {
								clsValue += (entry as any).value;
							}
						}
						console.log("CLS:", clsValue);
					});
					clsObserver.observe({ entryTypes: ["layout-shift"] });
				}
			}
		</script>

		<!-- Service Worker 注册（生产环境） -->
		<script>
			if (
				"serviceWorker" in navigator &&
				window.location.hostname !== "localhost" &&
				window.location.protocol === "https:"
			) {
				window.addEventListener("load", () => {
					navigator.serviceWorker
						.register("/sw.js")
						.then((registration) => {
							console.log("SW registered: ", registration);
						})
						.catch((registrationError) => {
							console.log("SW registration failed: ", registrationError);
						});
				});
			}
		</script>
	</body>
</html>

<style is:global>
	/* 导入优化后的全局样式 */
	@import "../styles/global.css";

	/* 组件特定样式 */

	/* 页面加载动画 */
	@keyframes pageLoad {
		from {
			opacity: 0;
			transform: translateY(20px);
		}
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}

	/* 返回顶部按钮特殊效果 */
	#back-to-top {
		background: var(--btn-primary-bg);
		color: var(--btn-primary-text);
	}

	#back-to-top:hover {
		background: var(--btn-primary-bg-hover);
		transform: translateY(-1px) scale(1.05);
	}

	/* 选择文本样式增强 */
	::selection {
		background-color: rgba(249, 115, 22, 0.2);
		color: #c2410c;
	}

	.dark ::selection {
		background-color: rgba(251, 146, 60, 0.3);
		color: #fed7aa;
	}

	/* 焦点样式增强 */
	:focus-visible {
		outline: 2px solid var(--color-primary);
		outline-offset: 2px;
		border-radius: 4px;
		transition: outline var(--transition-fast);
	}

	/* 工具提示样式 */
	[data-tooltip] {
		position: relative;
	}

	[data-tooltip]:hover::after {
		content: attr(data-tooltip);
		position: absolute;
		bottom: 100%;
		left: 50%;
		transform: translateX(-50%);
		background: rgba(0, 0, 0, 0.9);
		color: white;
		padding: 0.5rem 0.75rem;
		border-radius: 0.375rem;
		font-size: 0.875rem;
		white-space: nowrap;
		z-index: 50;
		pointer-events: none;
		animation: fadeIn 0.2s ease-in-out;
		box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
	}

	[data-tooltip]:hover::before {
		content: "";
		position: absolute;
		bottom: 100%;
		left: 50%;
		transform: translateX(-50%) translateY(2px);
		border: 4px solid transparent;
		border-top-color: rgba(0, 0, 0, 0.9);
		z-index: 50;
		pointer-events: none;
		animation: fadeIn 0.2s ease-in-out;
	}

	.dark [data-tooltip]:hover::after {
		background: rgba(241, 245, 249, 0.95);
		color: #0f172a;
		box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
	}

	.dark [data-tooltip]:hover::before {
		border-top-color: rgba(241, 245, 249, 0.95);
	}

	/* 代码块增强样式 */
	pre {
		position: relative;
		background: var(--code-block-bg) !important;
		border: 1px solid var(--code-block-border);
		border-radius: 8px;
		overflow: hidden;
	}

	pre code {
		background: transparent !important;
		color: var(--code-block-text) !important;
		font-family: "JetBrains Mono", "Fira Code", "Cascadia Code", monospace !important;
	}

	/* 行内代码样式 */
	:not(pre) > code {
		background: var(--code-bg) !important;
		color: var(--code-text) !important;
		padding: 0.125rem 0.375rem;
		border-radius: 0.25rem;
		font-size: 0.875em;
		font-family: "JetBrains Mono", "Fira Code", "Cascadia Code", monospace !important;
		border: 1px solid var(--g-border-light);
	}

	/* 链接悬停效果增强 */
	a {
		transition: all var(--transition-fast);
	}

	a:hover {
		text-decoration: none;
		transform: translateY(-1px);
	}

	/* 图片加载效果 */
	img {
		transition: all var(--transition-normal);
	}

	img[data-src] {
		filter: blur(4px);
		transition: filter var(--transition-normal);
	}

	/* 表单元素样式统一 */
	input,
	textarea,
	select {
		background: var(--s-input-bg);
		border: 1px solid var(--s-input-border);
		color: var(--s-input-text);
		border-radius: 0.5rem;
		padding: 0.75rem;
		transition: all var(--transition-fast);
	}

	input:focus,
	textarea:focus,
	select:focus {
		outline: none;
		border-color: var(--s-input-border-focus);
		box-shadow: 0 0 0 3px rgba(249, 115, 22, 0.1);
	}

	input::placeholder,
	textarea::placeholder {
		color: var(--s-input-placeholder);
	}

	/* 按钮样式统一 */
	button {
		transition: all var(--transition-fast);
		border-radius: 0.5rem;
		font-weight: 500;
		cursor: pointer;
		border: none;
	}

	button:focus-visible {
		outline: 2px solid var(--color-primary);
		outline-offset: 2px;
	}

	button:disabled {
		opacity: 0.6;
		cursor: not-allowed;
		transform: none !important;
	}

	/* 滚动行为优化 */
	html {
		scroll-behavior: smooth;
		scroll-padding-top: 5rem;
	}

	/* 减少动画（用户偏好） */
	@media (prefers-reduced-motion: reduce) {
		*,
		*::before,
		*::after {
			animation-duration: 0.01ms !important;
			animation-iteration-count: 1 !important;
			transition-duration: 0.01ms !important;
			scroll-behavior: auto !important;
		}
	}

	/* 高对比度模式 */
	@media (prefers-contrast: high) {
		:root {
			--g-text-secondary: var(--g-text-primary);
			--g-text-tertiary: var(--g-text-primary);
			--g-border: #000000;
		}

		.dark {
			--g-text-secondary: var(--g-text-primary);
			--g-text-tertiary: var(--g-text-primary);
			--g-border: #ffffff;
		}
	}

	/* 打印样式 */
	@media print {
		* {
			background: white !important;
			color: black !important;
			box-shadow: none !important;
			text-shadow: none !important;
		}

		a[href]:after {
			content: " (" attr(href) ")";
			font-size: 0.8em;
			color: #666;
		}

		img {
			max-width: 100% !important;
			height: auto !important;
			page-break-inside: avoid;
		}

		h1,
		h2,
		h3,
		h4,
		h5,
		h6 {
			page-break-after: avoid;
			page-break-inside: avoid;
		}

		p,
		li {
			page-break-inside: avoid;
		}

		.no-print {
			display: none !important;
		}
	}

	/* 移动端优化 */
	@media (max-width: 768px) {
		html {
			scroll-padding-top: 4rem;
		}

		/* 触摸优化 */
		button,
		a,
		input,
		textarea,
		select {
			min-height: 44px;
			min-width: 44px;
		}

		/* 字体大小调整 */
		body {
			font-size: 16px;
			line-height: 1.6;
		}

		/* 间距调整 */
		.container {
			padding-left: 1rem;
			padding-right: 1rem;
		}
	}

	/* 深色模式特殊处理 */
	@media (prefers-color-scheme: dark) {
		:root:not(.dark) {
			color-scheme: light;
		}
	}

	.dark {
		color-scheme: dark;
	}

	/* 性能优化 - 硬件加速 */
	.gpu-accelerated {
		transform: translateZ(0);
		backface-visibility: hidden;
		perspective: 1000px;
	}

	/* 内容加载状态 */
	.content-loading {
		position: relative;
		overflow: hidden;
	}

	.content-loading::after {
		content: "";
		position: absolute;
		top: 0;
		left: -100%;
		width: 100%;
		height: 100%;
		background: linear-gradient(
			90deg,
			transparent 0%,
			rgba(255, 255, 255, 0.2) 50%,
			transparent 100%
		);
		animation: shimmer 1.5s infinite;
	}

	.dark .content-loading::after {
		background: linear-gradient(
			90deg,
			transparent 0%,
			rgba(255, 255, 255, 0.1) 50%,
			transparent 100%
		);
	}

	@keyframes shimmer {
		0% {
			left: -100%;
		}
		100% {
			left: 100%;
		}
	}
</style>
